// Package v1 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// APIMessagePayload defines model for APIMessagePayload.
type APIMessagePayload struct {

	// Response status message
	Message *string `json:"message,omitempty"`

	// Response status message id
	Messageid *string `json:"messageid,omitempty"`

	// Response request id
	Requestid *string `json:"requestid,omitempty"`

	// Response status code
	Statuscode *int64 `json:"statuscode,omitempty"`

	// Response time-stamp
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// CatalogRef defines model for CatalogRef.
type CatalogRef struct {

	// Dry run
	DryRun *bool `json:"dry_run,omitempty"`

	// The URL to the icon of the software template in the IBM Cloud catalog.
	ItemIconUrl *string `json:"item_icon_url,omitempty"`

	// The ID of the software template that you chose to install from the IBM Cloud catalog. This software is provisioned with Schematics.
	ItemId *string `json:"item_id,omitempty"`

	// The name of the software that you chose to install from the IBM Cloud catalog.
	ItemName *string `json:"item_name,omitempty"`

	// The URL to the readme file of the software template in the IBM Cloud catalog.
	ItemReadmeUrl *string `json:"item_readme_url,omitempty"`

	// The URL to the software template in the IBM Cloud catalog.
	ItemUrl *string `json:"item_url,omitempty"`

	// The URL to the dashboard to access your software.
	LaunchUrl *string `json:"launch_url,omitempty"`

	// The version of the software template that you chose to install from the IBM Cloud catalog.
	OfferingVersion *string `json:"offering_version,omitempty"`
}

// EnvValueUpdateRequest defines model for EnvValueUpdateRequest.
type EnvValueUpdateRequest struct {

	// Environment variable name
	Name *string `json:"name,omitempty"`

	// Value for environment variable
	Value *string `json:"value,omitempty"`
}

// EnvVariableRequest defines model for EnvVariableRequest.
type EnvVariableRequest []map[string]interface{}

// EnvVariableResponse defines model for EnvVariableResponse.
type EnvVariableResponse struct {

	// Environment variable is hidden
	Hidden *bool `json:"hidden,omitempty"`

	// Environment variable name
	Name *string `json:"name,omitempty"`

	// Environment variable is secure
	Secure *bool `json:"secure,omitempty"`

	// Value for environment variable
	Value *string `json:"value,omitempty"`
}

// LogStoreResponse defines model for LogStoreResponse.
type LogStoreResponse struct {

	// The provisioning engine that was used for the action.
	EngineName *string `json:"engine_name,omitempty"`

	// The version of the provisioning engine that was used for the action.
	EngineVersion *string `json:"engine_version,omitempty"`

	// The ID that was assigned to your Terraform template of IBM Cloud catalog software template.
	Id *string `json:"id,omitempty"`

	// The URL to access the logs that were created during the plan, apply, or destroy action.
	LogStoreUrl *string `json:"log_store_url,omitempty"`
}

// LogStoreResponseList defines model for LogStoreResponseList.
type LogStoreResponseList struct {

	// Runtime data
	RuntimeData *[]LogStoreResponse `json:"runtime_data,omitempty"`
}

// LogSummary defines model for LogSummary.
type LogSummary struct {

	// The status of your action. To retrieve the URL to your action logs, use the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
	//
	//
	//  * **COMPLETED**: The action completed successfully.
	// * **CREATED**: The action was created, but the provisioning, modification, or removal of IBM Cloud resources has not started yet.
	// * **FAILED**: An error occurred during the plan, apply, or destroy action. Use the activity ID to retrieve the URL to the log files for your action.
	// * **IN PROGRESS**: The action is in progress. You can use the `log_url` to access the logs.
	ActivityStatus *WorkspaceActivityStatus `json:"activity_status,omitempty"`

	// Template detected type
	DetectedTemplateType *string `json:"detected_template_type,omitempty"`

	// Numner of discarded files
	DiscardedFiles *int64 `json:"discarded_files,omitempty"`

	// Numner of errors in log
	Error *string `json:"error,omitempty"`

	// Numner of resources added
	ResourcesAdded *int64 `json:"resources_added,omitempty"`

	// Numner of resources destroyed
	ResourcesDestroyed *int64 `json:"resources_destroyed,omitempty"`

	// Numner of resources modified
	ResourcesModified *int64 `json:"resources_modified,omitempty"`

	// Numner of filed scanned
	ScannedFiles *int64 `json:"scanned_files,omitempty"`

	// Numner of template variables
	TemplateVariableCount *int64 `json:"template_variable_count,omitempty"`

	// Time takemn to perform activity
	TimeTaken *float64 `json:"time_taken,omitempty"`
}

// OutputValues defines model for OutputValues.
type OutputValues []OutputValuesInner

// OutputValuesInner defines model for OutputValues_inner.
type OutputValuesInner struct {

	// The subfolder in the GitHub or GitLab repository where your Terraform template is stored. If the template is stored in the root directory, `.` is returned.
	Folder *string `json:"folder,omitempty"`

	// The ID that was assigned to your Terraform template or IBM Cloud catalog software template.
	Id *string `json:"id,omitempty"`

	// A list of Terraform output values.
	OutputValues *[]map[string]interface{} `json:"output_values,omitempty"`

	// The Terraform version that was used to apply your template.
	ValueType *string `json:"value_type,omitempty"`
}

// ResourceGroupResponse defines model for ResourceGroupResponse.
type ResourceGroupResponse struct {

	// The ID of the account for which you listed the resource groups.
	AccountId *string `json:"account_id,omitempty"`

	// The CRN of the resource group.
	Crn *string `json:"crn,omitempty"`

	// If set to **true**, the resource group is used as the default resource group for your account. If set to **false**, the resource group is not used as the default resource group in your account.
	Default *bool `json:"default,omitempty"`

	// The name of the resource group.
	Name *string `json:"name,omitempty"`

	// The ID of the resource group.
	ResourceGroupId *string `json:"resource_group_id,omitempty"`

	// The state of the resource group.
	State *string `json:"state,omitempty"`
}

// SchematicsLocations defines model for SchematicsLocations.
type SchematicsLocations struct {

	// The country where the location is located.
	Country *string `json:"country,omitempty"`

	// The geography that the location belongs to.
	Geography *string `json:"geography,omitempty"`

	// The ID of the location.
	Id *string `json:"id,omitempty"`

	// The kind of location.
	Kind *string `json:"kind,omitempty"`

	// The metro area that the location belongs to.
	Metro *string `json:"metro,omitempty"`

	// The multizone metro area that the location belongs to.
	MultizoneMetro *string `json:"multizone_metro,omitempty"`

	// The name of the location.
	Name *string `json:"name,omitempty"`
}

// SharedTargetData defines model for SharedTargetData.
type SharedTargetData struct {

	// Cluster created on
	ClusterCreatedOn *string `json:"cluster_created_on,omitempty"`

	// The ID of the cluster where you want to provision the resources of all IBM Cloud catalog templates that are included in the catalog offering.
	ClusterId *string `json:"cluster_id,omitempty"`

	// Cluster name
	ClusterName *string `json:"cluster_name,omitempty"`

	// Cluster type
	ClusterType *string `json:"cluster_type,omitempty"`

	// The entitlement key that you want to use to install IBM Cloud entitled software.
	EntitlementKeys *[]map[string]interface{} `json:"entitlement_keys,omitempty"`

	// The Kubernetes namespace or OpenShift project where the resources of all IBM Cloud catalog templates that are included in the catalog offering are deployed into.
	Namespace *string `json:"namespace,omitempty"`

	// The IBM Cloud region that you want to use for the resources of all IBM Cloud catalog templates that are included in the catalog offering.
	Region *string `json:"region,omitempty"`

	// The ID of the resource group that you want to use for the resources of all IBM Cloud catalog templates that are included in the catalog offering.
	ResourceGroupId *string `json:"resource_group_id,omitempty"`

	// Cluster worker count
	WorkerCount *int64 `json:"worker_count,omitempty"`

	// Cluster worker type
	WorkerMachineType *string `json:"worker_machine_type,omitempty"`
}

// SharedTargetDataResponse defines model for SharedTargetDataResponse.
type SharedTargetDataResponse struct {

	// The ID of the cluster where you want to provision the resources of all IBM Cloud catalog templates that are included in the catalog offering.
	ClusterId *string `json:"cluster_id,omitempty"`

	// Target cluster name
	ClusterName *string `json:"cluster_name,omitempty"`

	// The entitlement key that you want to use to install IBM Cloud entitled software.
	EntitlementKeys *[]map[string]interface{} `json:"entitlement_keys,omitempty"`

	// The Kubernetes namespace or OpenShift project where the resources of all IBM Cloud catalog templates that are included in the catalog offering are deployed into.
	Namespace *string `json:"namespace,omitempty"`

	// The IBM Cloud region that you want to use for the resources of all IBM Cloud catalog templates that are included in the catalog offering.
	Region *string `json:"region,omitempty"`

	// The ID of the resource group that you want to use for the resources of all IBM Cloud catalog templates that are included in the catalog offering.
	ResourceGroupId *string `json:"resource_group_id,omitempty"`
}

// StateStoreResponse defines model for StateStoreResponse.
type StateStoreResponse struct {

	// The provisioning engine that was used to apply the Terraform template or IBM Cloud catalog software template.
	EngineName *string `json:"engine_name,omitempty"`

	// The version of the provisioning engine that was used.
	EngineVersion *string `json:"engine_version,omitempty"`

	// The ID that was assigned to your Terraform template or IBM Cloud catalog software template.
	Id *string `json:"id,omitempty"`

	// The URL where the Terraform statefile (`terraform.tfstate`) is stored. You can use the statefile to find an overview of IBM Cloud resources that were created by Schematics. Schematics uses the statefile as an inventory list to determine future create, update, or deletion actions.
	StateStoreUrl *string `json:"state_store_url,omitempty"`
}

// StateStoreResponseList defines model for StateStoreResponseList.
type StateStoreResponseList struct {

	// Information about workspace runtime data.
	RuntimeData *[]StateStoreResponse `json:"runtime_data,omitempty"`
}

// StatusMessages defines model for StatusMessages.
type StatusMessages []string

// Tags defines model for Tags.
type Tags []string

// TemplateData defines model for TemplateData.
type TemplateData []TemplateSourceDataRequest

// TemplateLogStoreString defines model for TemplateLogStoreString.
type TemplateLogStoreString string

// TemplateMetadata defines model for TemplateMetadata.
type TemplateMetadata []map[string]interface{}

// TemplateReadme defines model for TemplateReadme.
type TemplateReadme struct {

	// The `README.md` file for the template that your workspace points to.
	Readme *string `json:"readme,omitempty"`
}

// TemplateRepoRequest defines model for TemplateRepoRequest.
type TemplateRepoRequest struct {

	// The branch in GitHub where your Terraform template is stored.
	Branch *string `json:"branch,omitempty"`

	// The release tag in GitHub of your Terraform template.
	Release *string `json:"release,omitempty"`

	// Repo SHA value
	RepoShaValue *string `json:"repo_sha_value,omitempty"`

	// The URL to the repository where the IBM Cloud catalog software template is stored.
	RepoUrl *string `json:"repo_url,omitempty"`

	// The URL to the GitHub or GitLab repository where your Terraform and public bit bucket template is stored. For more information of the environment variable syntax, see [Create workspace new](/docs/schematics?topic=schematics-schematics-cli-reference#schematics-workspace-new)
	Url *string `json:"url,omitempty"`
}

// TemplateRepoResponse defines model for TemplateRepoResponse.
type TemplateRepoResponse struct {

	// The branch in GitHub where your Terraform template is stored.
	Branch *string `json:"branch,omitempty"`

	// Full repo URL
	FullUrl *string `json:"full_url,omitempty"`

	// Has uploaded git repo tar
	HasUploadedgitrepotar *bool `json:"has_uploadedgitrepotar,omitempty"`

	// The release tag in GitHub of your Terraform template.
	Release *string `json:"release,omitempty"`

	// Repo SHA value
	RepoShaValue *string `json:"repo_sha_value,omitempty"`

	// The URL to the repository where the IBM Cloud catalog software template is stored.
	RepoUrl *string `json:"repo_url,omitempty"`

	// The URL to the GitHub or GitLab repository where your Terraform template is stored.
	Url *string `json:"url,omitempty"`
}

// TemplateRepoTarUploadResponse defines model for TemplateRepoTarUploadResponse.
type TemplateRepoTarUploadResponse struct {

	// Tar file value
	FileValue *string `json:"file_value,omitempty"`

	// Has received tar file
	HasReceivedFile *bool `json:"has_received_file,omitempty"`

	// Template id
	Id *string `json:"id,omitempty"`
}

// TemplateRepoUpdateRequest defines model for TemplateRepoUpdateRequest.
type TemplateRepoUpdateRequest struct {

	// Repo branch
	Branch *string `json:"branch,omitempty"`

	// Repo release
	Release *string `json:"release,omitempty"`

	// Repo SHA value
	RepoShaValue *string `json:"repo_sha_value,omitempty"`

	// Repo URL
	RepoUrl *string `json:"repo_url,omitempty"`

	// Source URL
	Url *string `json:"url,omitempty"`
}

// TemplateResource defines model for TemplateResource.
type TemplateResource []map[string]interface{}

// TemplateResources defines model for TemplateResources.
type TemplateResources struct {

	// The subfolder in GitHub or GitLab where your Terraform templates are stored. If your template is stored in the root directory, `.` is returned.
	Folder *string `json:"folder,omitempty"`

	// The ID that was assigned to your Terraform template or IBM Cloud catalog software template.
	Id *string `json:"id,omitempty"`

	// List of null resources
	NullResources *[]map[string]interface{} `json:"null_resources,omitempty"`

	// Information about the IBM Cloud resources that are associated with your workspace.
	RelatedResources *[]map[string]interface{} `json:"related_resources,omitempty"`

	// Information about the IBM Cloud resources that are associated with your workspace.
	Resources *[]map[string]interface{} `json:"resources,omitempty"`

	// Number of resources
	ResourcesCount *int64 `json:"resources_count,omitempty"`

	// The Terraform version that was used to apply your template.
	TemplateType *string `json:"template_type,omitempty"`
}

// TemplateResourcesList defines model for TemplateResourcesList.
type TemplateResourcesList []TemplateResources

// TemplateRunTimeDataResponse defines model for TemplateRunTimeDataResponse.
type TemplateRunTimeDataResponse struct {

	// The command that was used to apply the Terraform template or IBM Cloud catalog software template.
	EngineCmd *string `json:"engine_cmd,omitempty"`

	// The provisioning engine that was used to apply the Terraform template or IBM Cloud catalog software template.
	EngineName *string `json:"engine_name,omitempty"`

	// The version of the provisioning engine that was used.
	EngineVersion *string `json:"engine_version,omitempty"`

	// The ID that was assigned to your Terraform template or IBM Cloud catalog software template.
	Id *string `json:"id,omitempty"`

	// The URL to access the logs that were created during the creation, update, or deletion of your IBM Cloud resources.
	LogStoreUrl *string `json:"log_store_url,omitempty"`

	// List of Output values
	OutputValues *[]map[string]interface{} `json:"output_values,omitempty"`

	// List of resources
	Resources *[]TemplateResource `json:"resources,omitempty"`

	// The URL where the Terraform statefile (`terraform.tfstate`) is stored. You can use the statefile to find an overview of IBM Cloud resources that were created by Schematics. Schematics uses the statefile as an inventory list to determine future create, update, or deletion actions.
	StateStoreUrl *string `json:"state_store_url,omitempty"`
}

// TemplateSourceDataRequest defines model for TemplateSourceDataRequest.
type TemplateSourceDataRequest struct {

	// A list of environment variables that you want to apply during the
	// execution of a bash script. Environment variables must be provided as
	// key value pairs. You can define environment variables  for IBM Cloud
	//  catalog offerings that are provisioned by using a bash script.
	EnvValues *EnvVariableRequest `json:"env_values,omitempty"`

	// The subfolder in your GitHub or GitLab repository where your Terraform template is stored.
	Folder *string `json:"folder,omitempty"`

	// The content of an existing Terraform statefile that you want to import in to your workspace. To get the content of a Terraform statefile for a specific Terraform template in an existing workspace, run `ibmcloud terraform state pull --id <workspace_id> --template <template_id>`.
	InitStateFile *string `json:"init_state_file,omitempty"`

	// The Terraform version that you want to use to run your Terraform code. Enter `terraform_v0.12` to use Terraform version 0.12, and `terraform_v0.11` to use Terraform version 0.11. If no value is specified, the Terraform config files are run with Terraform version 0.11. Make sure that your Terraform config files are compatible with the Terraform version that you select.
	Type *string `json:"type,omitempty"`

	// Uninstall script name
	UninstallScriptName *string `json:"uninstall_script_name,omitempty"`

	// A list of variable values that you want to apply during the Helm chart installation. The list must be provided in JSON format, such as `"autoscaling:
	//   enabled: true
	//   minReplicas: 2"`. The values that you define here override the default Helm chart values. This field is supported only for IBM Cloud catalog offerings that are provisioned by using the Terraform Helm provider.
	Values *string `json:"values,omitempty"`

	// List of values metadata
	ValuesMetadata *[]map[string]interface{} `json:"values_metadata,omitempty"`

	// VariablesRequest -
	Variablestore *VariablesRequest `json:"variablestore,omitempty"`
}

// TemplateSourceDataResponse defines model for TemplateSourceDataResponse.
type TemplateSourceDataResponse struct {

	// List of environment values
	EnvValues *[]EnvVariableResponse `json:"env_values,omitempty"`

	// The subfolder in your GitHub or GitLab repository where your Terraform template is stored. If your template is stored in the root directory, `.` is returned.
	Folder *string `json:"folder,omitempty"`

	// Has github token
	HasGithubtoken *bool `json:"has_githubtoken,omitempty"`

	// The ID that was assigned to your Terraform template or IBM Cloud catalog software template.
	Id *string `json:"id,omitempty"`

	// The Terraform version that was used to run your Terraform code.
	TemplateType *string `json:"template_type,omitempty"`

	// Uninstall script name
	UninstallScriptName *string `json:"uninstall_script_name,omitempty"`

	// A list of variable values that you want to apply during the Helm chart installation. The list must be provided in JSON format, such as `""autoscaling:
	//   enabled: true
	//   minReplicas: 2"`. The values that you define here override the default Helm chart values. This field is supported only for IBM Cloud catalog offerings that are provisioned by using the Terraform Helm provider.
	Values *string `json:"values,omitempty"`

	// A list of input variables that are associated with the workspace.
	ValuesMetadata *[]map[string]interface{} `json:"values_metadata,omitempty"`

	// The API endpoint to access the input variables that you defined for your template.
	ValuesUrl *string `json:"values_url,omitempty"`

	// Information about the input variables that your template uses.
	Variablestore *VariablesResponse `json:"variablestore,omitempty"`
}

// TemplateStateStore defines model for TemplateStateStore.
type TemplateStateStore struct {
	Lineage          *string                   `json:"lineage,omitempty"`
	Modules          *[]map[string]interface{} `json:"modules,omitempty"`
	Serial           *float32                  `json:"serial,omitempty"`
	TerraformVersion *string                   `json:"terraform_version,omitempty"`
	Version          *float32                  `json:"version,omitempty"`
}

// TemplateValues defines model for TemplateValues.
type TemplateValues struct {
	ValuesMetadata *[]map[string]interface{} `json:"values_metadata,omitempty"`
}

// UserValues defines model for UserValues.
type UserValues struct {

	// EnvVariableResponse -
	EnvValues *EnvVariableResponse `json:"env_values,omitempty"`

	// A list of variable values that you want to apply during the Helm chart installation. The list must be provided in JSON format, such as `"autoscaling:
	//   enabled: true
	//   minReplicas: 2"`. The values that you define here override the default Helm chart values. This field is supported only for IBM Cloud catalog offerings that are provisioned by using the Terraform Helm provider.
	Values *string `json:"values,omitempty"`

	// Information about the input variables that your template uses.
	Variablestore *VariablesResponse `json:"variablestore,omitempty"`
}

// UserValuesRequest defines model for UserValuesRequest.
type UserValuesRequest struct {

	// List of environment variables to update
	EnvValues *[]EnvValueUpdateRequest `json:"env_values,omitempty"`

	// User values
	Values *string `json:"values,omitempty"`

	// VariablesUpdateRequest - for updating tf variables in put /values api
	Variablestore *VariablesUpdateRequest `json:"variablestore,omitempty"`
}

// VariablesRequest defines model for VariablesRequest.
type VariablesRequest []WorkspaceVariableRequest

// VariablesResponse defines model for VariablesResponse.
type VariablesResponse []WorkspaceVariableRequest

// VariablesUpdateRequest defines model for VariablesUpdateRequest.
type VariablesUpdateRequest []WorkspaceVariableUpdateRequest

// VersionResponse defines model for VersionResponse.
type VersionResponse struct {

	// The date when the API version was built.
	Builddate *string `json:"builddate,omitempty"`

	// The build number that the API is based on.
	Buildno *string `json:"buildno,omitempty"`

	// The SHA value for the Git commit that represents the latest version of the API.
	Commitsha *string `json:"commitsha,omitempty"`

	// The Terraform Helm provider version that is used when you install Helm charts with Schematics.
	HelmProviderVersion *string `json:"helm_provider_version,omitempty"`

	// The Helm version that is used when you install Helm charts with Schematics.
	HelmVersion *string `json:"helm_version,omitempty"`

	// Supported template types
	SupportedTemplateTypes *[]map[string]interface{} `json:"supported_template_types,omitempty"`

	// The version of the IBM Cloud Terraform provider plug-in that is used when you apply Terraform templates with Schematics.
	TerraformProviderVersion *string `json:"terraform_provider_version,omitempty"`

	// The Terraform version that is used when you apply Terraform templates with Schematics.
	TerraformVersion *string `json:"terraform_version,omitempty"`
}

// WorkspaceActivities defines model for WorkspaceActivities.
type WorkspaceActivities struct {

	// List of workspace activities
	Actions *[]WorkspaceActivity `json:"actions,omitempty"`

	// The ID of the workspace.
	WorkspaceId *string `json:"workspace_id,omitempty"`

	// The name of the workspace.
	WorkspaceName *string `json:"workspace_name,omitempty"`
}

// WorkspaceActivity defines model for WorkspaceActivity.
type WorkspaceActivity struct {

	// The ID of the action. You can use the ID to retrieve the URL to the logs for that action by using the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
	ActionId *string `json:"action_id,omitempty"`

	// Information about the success or failure of your action, including a success or error code and the timestamp when the action succeeded or failed.
	Message *StatusMessages `json:"message,omitempty"`

	// The type of action that ran against your workspace.
	//
	//
	//  * **APPLY**: The apply action was created when you used the `PUT /v1/workspaces/{id}/apply` API to apply a Terraform template in IBM Cloud.
	//  * **DESTROY**: The destroy action was created when you used the `DELETE /v1/workspaces/{id}/destroy` API to remove all resources that are associated with your workspace.
	//  * **PLAN**: The plan action was created when you used the `POST /v1/workspaces/{id}/plan` API to create a Terraform execution plan.
	Name *WorkspaceActivityAction `json:"name,omitempty"`

	// The timestamp when the action was initiated.
	PerformedAt *time.Time `json:"performed_at,omitempty"`

	// The user ID who initiated the action.
	PerformedBy *string `json:"performed_by,omitempty"`

	// The status of your action. To retrieve the URL to your action logs, use the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
	//
	//
	//  * **COMPLETED**: The action completed successfully.
	// * **CREATED**: The action was created, but the provisioning, modification, or removal of IBM Cloud resources has not started yet.
	// * **FAILED**: An error occurred during the plan, apply, or destroy action. Use the activity ID to retrieve the URL to the log files for your action.
	// * **IN PROGRESS**: The action is in progress. You can use the `log_url` to access the logs.
	Status *WorkspaceActivityStatus `json:"status,omitempty"`

	// List of template activities
	Templates *[]WorkspaceActivityTemplate `json:"templates,omitempty"`
}

// WorkspaceActivityAction defines model for WorkspaceActivityAction.
type WorkspaceActivityAction string

// WorkspaceActivityApplyResult defines model for WorkspaceActivityApplyResult.
type WorkspaceActivityApplyResult struct {

	// The ID of the activity that was created when you initiated a request to apply a Terraform template. You can use the ID to retrieve the URL to your log file by using the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
	Activityid *string `json:"activityid,omitempty"`
}

// WorkspaceActivityDestroyResult defines model for WorkspaceActivityDestroyResult.
type WorkspaceActivityDestroyResult struct {

	// The ID of the activity that was created for your IBM Cloud resource removal action. You can use the ID to retrieve the URL to your log file by using the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
	Activityid *string `json:"activityid,omitempty"`
}

// WorkspaceActivityLogs defines model for WorkspaceActivityLogs.
type WorkspaceActivityLogs struct {

	// The ID of the action that ran against your workspace.
	ActionId *string `json:"action_id,omitempty"`

	// The type of action that ran against your workspace.
	//
	//
	//  * **APPLY**: The apply action was created when you used the `PUT /v1/workspaces/{id}/apply` API to apply a Terraform template in IBM Cloud.
	//  * **DESTROY**: The destroy action was created when you used the `DELETE /v1/workspaces/{id}/destroy` API to remove all resources that are associated with your workspace.
	//  * **PLAN**: The plan action was created when you used the `POST /v1/workspaces/{id}/plan` API to create a Terraform execution plan.
	Name *WorkspaceActivityAction `json:"name,omitempty"`

	// List of activity logs
	Templates *[]WorkspaceActivityTemplateLogs `json:"templates,omitempty"`
}

// WorkspaceActivityOptions defines model for WorkspaceActivityOptions.
type WorkspaceActivityOptions struct {

	// The resources to target.
	ActionOptions *WorkspaceActivityOptionsTemplate `json:"action_options,omitempty"`
}

// WorkspaceActivityOptionsTemplate defines model for WorkspaceActivityOptionsTemplate.
type WorkspaceActivityOptionsTemplate struct {

	// A list of Terraform resource addresses to target.
	Target *[]string `json:"target,omitempty"`

	// Action tfvars
	TfVars *[]string `json:"tf_vars,omitempty"`
}

// WorkspaceActivityPlanResult defines model for WorkspaceActivityPlanResult.
type WorkspaceActivityPlanResult struct {

	// The ID of the activity that ran against the workspace. This activity can be a `PLAN`, `APPLY`, or `DESTROY` action. You use the activity ID to retrieve the log URL with the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
	Activityid *string `json:"activityid,omitempty"`
}

// WorkspaceActivityRefreshResult defines model for WorkspaceActivityRefreshResult.
type WorkspaceActivityRefreshResult struct {

	// The ID of the activity that was created for your workspace refresh action. You can use the ID to retrieve the URL to your log file by using the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
	Activityid *string `json:"activityid,omitempty"`
}

// WorkspaceActivityStatus defines model for WorkspaceActivityStatus.
type WorkspaceActivityStatus string

// WorkspaceActivityTemplate defines model for WorkspaceActivityTemplate.
type WorkspaceActivityTemplate struct {

	// The timestamp when the action completed or failed.
	EndTime *time.Time `json:"end_time,omitempty"`

	// LogSummary ...
	LogSummary *LogSummary `json:"log_summary,omitempty"`

	// The URL to access the logs that were created during the plan, apply, or destroy action.
	LogUrl *string `json:"log_url,omitempty"`

	// Information about the success or failure of your action, including a success or error code and the timestamp when the action succeeded or failed.
	Message *string `json:"message,omitempty"`

	// The timestamp when the action started.
	StartTime *time.Time `json:"start_time,omitempty"`

	// The status of your action. To retrieve the URL to your action logs, use the `GET /v1/workspaces/{id}/actions/{action_id}/logs` API.
	//
	//
	//  * **COMPLETED**: The action completed successfully.
	// * **CREATED**: The action was created, but the provisioning, modification, or removal of IBM Cloud resources has not started yet.
	// * **FAILED**: An error occurred during the plan, apply, or destroy action. Use the activity ID to retrieve the URL to the log files for your action.
	// * **IN PROGRESS**: The action is in progress. You can use the `log_url` to access the logs.
	Status *WorkspaceActivityStatus `json:"status,omitempty"`

	// The ID that was assigned to your Terraform template or IBM Cloud catalog software template.
	TemplateId *string `json:"template_id,omitempty"`

	// The type of template.
	TemplateType *string `json:"template_type,omitempty"`
}

// WorkspaceActivityTemplateLogString defines model for WorkspaceActivityTemplateLogString.
type WorkspaceActivityTemplateLogString string

// WorkspaceActivityTemplateLogs defines model for WorkspaceActivityTemplateLogs.
type WorkspaceActivityTemplateLogs struct {

	// The URL to access the logs that were created during the plan, apply, or destroy action.
	LogUrl *string `json:"log_url,omitempty"`

	// The ID that was assigned to your Terraform template or IBM Cloud catalog software template.
	TemplateId *string `json:"template_id,omitempty"`

	// The type of template.
	TemplateType *string `json:"template_type,omitempty"`
}

// WorkspaceCreateRequest defines model for WorkspaceCreateRequest.
type WorkspaceCreateRequest struct {

	// List of applied shared dataset id
	AppliedShareddataIds *[]string `json:"applied_shareddata_ids,omitempty"`

	// Information about the software template that you chose from the IBM Cloud catalog. This information is returned for IBM Cloud catalog offerings only.
	CatalogRef *CatalogRef `json:"catalog_ref,omitempty"`

	// The description of the workspace.
	Description *string `json:"description,omitempty"`

	// The location where you want to create your Schematics workspace and run Schematics actions. The location that you enter must match the API endpoint that you use. For example, if you use the Frankfurt API endpoint, you must specify `eu-de` as your location. If you use an API endpoint for a geography and you do not specify a location, Schematics determines the location based on availability.
	Location *string `json:"location,omitempty"`

	// The name of your workspace. The name can be up to 128 characters long and can include alphanumeric characters, spaces, dashes, and underscores. When you create a workspace for your own Terraform template, consider including the microservice component that you set up with your Terraform template and the IBM Cloud environment where you want to deploy your resources in your name.
	Name *string `json:"name,omitempty"`

	// The ID of the resource group where you want to provision the workspace.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Information that is shared across templates in IBM Cloud catalog offerings. This information is not provided when you create a workspace from your own Terraform template.
	SharedData *SharedTargetData `json:"shared_data,omitempty"`

	// A list of tags that are associated with the workspace.
	Tags *[]string `json:"tags,omitempty"`

	// TemplateData -
	TemplateData *TemplateData `json:"template_data,omitempty"`

	// Workspace template ref
	TemplateRef *string `json:"template_ref,omitempty"`

	// Input parameter to specify the source repository where your Schematics template is stored.
	TemplateRepo *TemplateRepoRequest `json:"template_repo,omitempty"`

	// The Terraform version that you want to use to run your Terraform code. Enter `terraform_v0.12` to use Terraform version 0.12, and `terraform_v0.11` to use Terraform version 0.11. If no value is specified, the Terraform config files are run with Terraform version 0.11. Make sure that your Terraform config files are compatible with the Terraform version that you select.
	Type *[]string `json:"type,omitempty"`

	// WorkspaceStatusRequest -
	WorkspaceStatus *WorkspaceStatusRequest `json:"workspace_status,omitempty"`
}

// WorkspaceDeleteResponse defines model for WorkspaceDeleteResponse.
type WorkspaceDeleteResponse string

// WorkspaceResponse defines model for WorkspaceResponse.
type WorkspaceResponse struct {

	// List of applied shared dataset id
	AppliedShareddataIds *[]string `json:"applied_shareddata_ids,omitempty"`

	// Information about the software template that you chose from the IBM Cloud catalog. This information is returned for IBM Cloud catalog offerings only.
	CatalogRef *CatalogRef `json:"catalog_ref,omitempty"`

	// The timestamp when the workspace was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// The user ID that created the workspace.
	CreatedBy *string `json:"created_by,omitempty"`

	// Workspace CRN
	Crn *string `json:"crn,omitempty"`

	// The description of the workspace.
	Description *string `json:"description,omitempty"`

	// The unique identifier of the workspace.
	Id *string `json:"id,omitempty"`

	// The timestamp when the last health check was performed by Schematics.
	LastHealthCheckAt *time.Time `json:"last_health_check_at,omitempty"`

	// The IBM Cloud location where your workspace was provisioned.
	Location *string `json:"location,omitempty"`

	// The name of the workspace.
	Name *string `json:"name,omitempty"`

	// The resource group the workspace was provisioned in.
	ResourceGroup *string `json:"resource_group,omitempty"`

	// Information about the provisioning engine, state file, and runtime logs.
	RuntimeData *[]TemplateRunTimeDataResponse `json:"runtime_data,omitempty"`

	// Information that is shared across templates in IBM Cloud catalog offerings. This information is not provided when you create a workspace from your own Terraform template.
	SharedData *SharedTargetDataResponse `json:"shared_data,omitempty"`

	// The status of the workspace.
	//
	//  **Active**: After you successfully ran your infrastructure code by applying your Terraform execution plan, the state of your workspace changes to `Active`.
	//
	//  **Connecting**: Schematics tries to connect to the template in your source repo. If successfully connected, the template is downloaded and metadata, such as input parameters, is extracted. After the template is downloaded, the state of the workspace changes to `Scanning`.
	//
	//  **Draft**: The workspace is created without a reference to a GitHub or GitLab repository.
	//
	//  **Failed**: If errors occur during the execution of your infrastructure code in IBM Cloud Schematics, your workspace status is set to `Failed`.
	//
	//  **Inactive**: The Terraform template was scanned successfully and the workspace creation is complete. You can now start running Schematics plan and apply actions to provision the IBM Cloud resources that you specified in your template. If you have an `Active` workspace and decide to remove all your resources, your workspace is set to `Inactive` after all your resources are removed.
	//
	//  **In progress**: When you instruct IBM Cloud Schematics to run your infrastructure code by applying your Terraform execution plan, the status of our workspace changes to `In progress`.
	//
	//  **Scanning**: The download of the Terraform template is complete and vulnerability scanning started. If the scan is successful, the workspace state changes to `Inactive`. If errors in your template are found, the state changes to `Template Error`.
	//
	//  **Stopped**: The Schematics plan, apply, or destroy action was cancelled manually.
	//
	//  **Template Error**: The Schematics template contains errors and cannot be processed.
	Status *WorkspaceStatus `json:"status,omitempty"`

	// A list of tags that are associated with the workspace.
	Tags *[]string `json:"tags,omitempty"`

	// Information about the Terraform or IBM Cloud software template that you want to use.
	TemplateData *[]TemplateSourceDataResponse `json:"template_data,omitempty"`

	// Workspace template ref
	TemplateRef *string `json:"template_ref,omitempty"`

	// Information about the Terraform template that your workspace points to.
	TemplateRepo *TemplateRepoResponse `json:"template_repo,omitempty"`

	// The Terraform version that was used to run your Terraform code.
	Type *[]string `json:"type,omitempty"`

	// The timestamp when the workspace was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The user ID that updated the workspace.
	UpdatedBy *string `json:"updated_by,omitempty"`

	// Response parameter that indicate if a workspace is frozen or locked.
	WorkspaceStatus *WorkspaceStatusResponse `json:"workspace_status,omitempty"`

	// Information about the last action that ran against the workspace.
	WorkspaceStatusMsg *WorkspaceStatusMessage `json:"workspace_status_msg,omitempty"`
}

// WorkspaceResponseList defines model for WorkspaceResponseList.
type WorkspaceResponseList struct {

	// The number of workspaces in the IBM Cloud account that you have access to and that matched your search criteria.
	Count *int64 `json:"count,omitempty"`

	// The `limit` value that you set in your API request and that represents the maximum number of workspaces that you wanted to list.
	Limit int64 `json:"limit"`

	// The `offset` value that you set in your API request. The offset value represents the position number of the workspace from which you wanted to start listing your workspaces.
	Offset int64 `json:"offset"`

	// The list of workspaces that was included in your API response.
	Workspaces *[]WorkspaceResponse `json:"workspaces,omitempty"`
}

// WorkspaceStatus defines model for WorkspaceStatus.
type WorkspaceStatus string

// WorkspaceStatusMessage defines model for WorkspaceStatusMessage.
type WorkspaceStatusMessage struct {

	// The success or error code that was returned for the last plan, apply, or destroy action that ran against your workspace.
	StatusCode *string `json:"status_code,omitempty"`

	// The success or error message that was returned for the last plan, apply, or destroy action that ran against your workspace.
	StatusMsg *string `json:"status_msg,omitempty"`
}

// WorkspaceStatusRequest defines model for WorkspaceStatusRequest.
type WorkspaceStatusRequest struct {

	// If set to true, the workspace is frozen and changes to the workspace are disabled.
	Frozen *bool `json:"frozen,omitempty"`

	// The timestamp when the workspace was frozen.
	FrozenAt *time.Time `json:"frozen_at,omitempty"`

	// The user ID that froze the workspace.
	FrozenBy *string `json:"frozen_by,omitempty"`

	// If set to true, the workspace is locked and disabled for changes.
	Locked *bool `json:"locked,omitempty"`

	// The user ID that initiated a resource-related action, such as applying or destroying resources, that locked the workspace.
	LockedBy *string `json:"locked_by,omitempty"`

	// The timestamp when the workspace was locked.
	LockedTime *time.Time `json:"locked_time,omitempty"`
}

// WorkspaceStatusResponse defines model for WorkspaceStatusResponse.
type WorkspaceStatusResponse struct {

	// If set to true, the workspace is frozen and changes to the workspace are disabled.
	Frozen *bool `json:"frozen,omitempty"`

	// The timestamp when the workspace was frozen.
	FrozenAt *time.Time `json:"frozen_at,omitempty"`

	// The user ID that froze the workspace.
	FrozenBy *string `json:"frozen_by,omitempty"`

	// If set to true, the workspace is locked and disabled for changes.
	Locked *bool `json:"locked,omitempty"`

	// The user ID that initiated a resource-related action, such as applying or destroying resources, that locked the workspace.
	LockedBy *string `json:"locked_by,omitempty"`

	// The timestamp when the workspace was locked.
	LockedTime *time.Time `json:"locked_time,omitempty"`
}

// WorkspaceStatusUpdateRequest defines model for WorkspaceStatusUpdateRequest.
type WorkspaceStatusUpdateRequest struct {

	// If set to true, the workspace is frozen and changes to the workspace are disabled.
	Frozen *bool `json:"frozen,omitempty"`

	// Frozen at
	FrozenAt *time.Time `json:"frozen_at,omitempty"`

	// Frozen by
	FrozenBy *string `json:"frozen_by,omitempty"`

	// Locked status
	Locked *bool `json:"locked,omitempty"`

	// Locked by
	LockedBy *string `json:"locked_by,omitempty"`

	// Locked at
	LockedTime *time.Time `json:"locked_time,omitempty"`
}

// WorkspaceTemplateValuesResponse defines model for WorkspaceTemplateValuesResponse.
type WorkspaceTemplateValuesResponse struct {

	// Information about the provisioning engine, state file, and runtime logs.
	RuntimeData *[]TemplateRunTimeDataResponse `json:"runtime_data,omitempty"`

	// Information that is shared across templates in IBM Cloud catalog offerings. This information is not provided when you create a workspace from your own Terraform template.
	SharedData *SharedTargetData `json:"shared_data,omitempty"`

	// Information about the input variables that are used in the template.
	TemplateData *[]TemplateSourceDataResponse `json:"template_data,omitempty"`
}

// WorkspaceUpdateRequest defines model for WorkspaceUpdateRequest.
type WorkspaceUpdateRequest struct {

	// Information about the software template that you chose from the IBM Cloud catalog. This information is returned for IBM Cloud catalog offerings only.
	CatalogRef *CatalogRef `json:"catalog_ref,omitempty"`

	// The description of the workspace.
	Description *string `json:"description,omitempty"`

	// The name of the workspace.
	Name *string `json:"name,omitempty"`

	// Information that is shared across templates in IBM Cloud catalog offerings. This information is not provided when you create a workspace from your own Terraform template.
	SharedData *SharedTargetData `json:"shared_data,omitempty"`

	// A list of tags that you want to associate with your workspace.
	Tags *Tags `json:"tags,omitempty"`

	// TemplateData -
	TemplateData *TemplateData `json:"template_data,omitempty"`

	// TemplateRepoUpdateRequest -
	TemplateRepo *TemplateRepoUpdateRequest `json:"template_repo,omitempty"`

	// List of Workspace type
	Type *[]string `json:"type,omitempty"`

	// Information about the updated workspace status.
	WorkspaceStatus *WorkspaceStatusUpdateRequest `json:"workspace_status,omitempty"`

	// Information about the last action that ran against the workspace.
	WorkspaceStatusMsg *WorkspaceStatusMessage `json:"workspace_status_msg,omitempty"`
}

// WorkspaceVariableRequest defines model for WorkspaceVariableRequest.
type WorkspaceVariableRequest struct {

	// The description of your input variable.
	Description *string `json:"description,omitempty"`

	// The name of the variable.
	Name *string `json:"name,omitempty"`

	// If set to `true`, the value of your input variable is protected and not returned in your API response.
	Secure *bool `json:"secure,omitempty"`

	// `Terraform v0.11` supports `string`, `list`, `map` data type. For more information, about the syntax, see [Configuring input variables](https://www.terraform.io/docs/configuration-0-11/variables.html). <br> `Terraform v0.12` additionally, supports `bool`, `number` and complex data types such as `list(type)`, `map(type)`, `object({attribute name=type,..})`, `set(type)`, `tuple([type])`. For more information, about the syntax to use the complex data type, see [Configuring variables](https://www.terraform.io/docs/configuration/variables.html#type-constraints).
	Type *string `json:"type,omitempty"`

	// Enter the value as a string for the primitive types such as `bool`, `number`, `string`, and `HCL` format for the complex variables, as you provide in a `.tfvars` file. **You need to enter escaped string of `HCL` format for the complex variable value**. For more information, about how to declare variables in a terraform configuration file and provide value to schematics, see [Providing values for the declared variables](/docs/schematics?topic=schematics-create-tf-config#declare-variable).
	Value *string `json:"value,omitempty"`
}

// WorkspaceVariableUpdateRequest defines model for WorkspaceVariableUpdateRequest.
type WorkspaceVariableUpdateRequest struct {

	// The description of your input variable.
	Description *string `json:"description,omitempty"`

	// The name of the variable.
	Name *string `json:"name,omitempty"`

	// If set to `true`, the value of your input variable is protected and not returned in your API response.
	Secure *bool `json:"secure,omitempty"`

	// `Terraform v0.11` supports `string`, `list`, `map` data type. For more information, about the syntax, see [Configuring input variables](https://www.terraform.io/docs/configuration-0-11/variables.html). <br> `Terraform v0.12` additionally, supports `bool`, `number` and complex data types such as `list(type)`, `map(type)`, `object({attribute name=type,..})`, `set(type)`, `tuple([type])`. For more information, about the syntax to use the complex data type, see [Configuring variables](https://www.terraform.io/docs/configuration/variables.html#type-constraints).
	Type *string `json:"type,omitempty"`

	// If set to true, you are removing the overridden variable value from the .tfvars file. The next time plan or apply is executed, the default value for the variable in the Terraform template is used.
	UseDefault *bool `json:"use_default,omitempty"`

	// Enter the value as a string for the primitive types such as `bool`, `number`, `string`, and `HCL` format for the complex variables, as you provide in a `.tfvars` file. **You need to enter escaped string of `HCL` format for the complex variable value**. For more information, about how to declare variables in a terraform configuration file and provide value to schematics, see [Providing values for the declared variables](/docs/schematics?topic=schematics-create-tf-config#declare-variable).
	Value *string `json:"value,omitempty"`
}

// ListSchematicsLocationParams defines parameters for ListSchematicsLocation.
type ListSchematicsLocationParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// ListResourceGroupParams defines parameters for ListResourceGroup.
type ListResourceGroupParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// ListWorkspacesParams defines parameters for ListWorkspaces.
type ListWorkspacesParams struct {

	// The position of the workspace in the list of workspaces, from which you want to start listing your workspaces. For example, if you have three workspaces in your account, the first workspace is assigned position number 0, the second workspace is assigned position number 1, and so forth. If you have 6 workspaces and you want to list the details for workspaces 2-6, enter 1. To limit the number of workspaces that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not supported and are ignored.
	Offset *int `json:"offset,omitempty"`

	// The maximum number of workspaces that you want to list. The number must be a positive integer between 1 and 2000. If no value is provided, 100 is used by default.
	Limit *int `json:"limit,omitempty"`

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// CreateWorkspaceJSONBody defines parameters for CreateWorkspace.
type CreateWorkspaceJSONBody WorkspaceCreateRequest

// CreateWorkspaceParams defines parameters for CreateWorkspace.
type CreateWorkspaceParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, you need to create the IAM access token for your IBM Cloud Account. For more information, about creating IAM access token, refer, [Get token password](https://cloud.ibm.com/apidocs/iam-identity-token-api#gettoken-password).
	Authorization string `json:"Authorization"`

	// The personal access token to authenticate with your private GitHub or GitLab repository and access your Terraform template.
	XGithubToken *string `json:"X-Github-token,omitempty"`
}

// DeleteWorkspaceParams defines parameters for DeleteWorkspace.
type DeleteWorkspaceParams struct {

	// If set to `true`, refresh token header configuration is required to delete all the Terraform resources, and the Schematics workspace. If set to `false`, you can remove only the workspace. Your Terraform resources are still available and must be managed with the resource dashboard or CLI.
	DestroyResources *bool `json:"destroyResources,omitempty"`

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`

	// The IAM refresh token is required only if you want to delete all the Terraform resources before deleting the Schematics workspace. If you want to delete the workspace only and keep all your Terraform resources, refresh token is not required.
	//
	//  **Retrieving refresh token**:
	//  * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
	//  * For more information, about creating IAM access token and API Docs, refer, [IAM access token](https://cloud.ibm.com/apidocs/iam-identity-token-api#gettoken-password) and [Create API key](https://cloud.ibm.com/apidocs/iam-identity-token-api#create-api-key).
	//
	//  **Limitation**:
	//  * If the token is expired, you can use `refresh token` to get a new IAM access token.
	//  * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
	//  * When the IAM access token is about to expire, use the API key to create a new access token.
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// GetWorkspaceParams defines parameters for GetWorkspace.
type GetWorkspaceParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// UpdateWorkspaceJSONBody defines parameters for UpdateWorkspace.
type UpdateWorkspaceJSONBody WorkspaceUpdateRequest

// UpdateWorkspaceParams defines parameters for UpdateWorkspace.
type UpdateWorkspaceParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// ReplaceWorkspaceJSONBody defines parameters for ReplaceWorkspace.
type ReplaceWorkspaceJSONBody WorkspaceUpdateRequest

// ReplaceWorkspaceParams defines parameters for ReplaceWorkspace.
type ReplaceWorkspaceParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// ListWorkspaceActivitiesParams defines parameters for ListWorkspaceActivities.
type ListWorkspaceActivitiesParams struct {

	// The maximum number of actions that you want to include in your response. The number that you enter must be between 1 and 200. If no number is provided, 100 is used by default.
	Limit *int `json:"limit,omitempty"`

	// The position of the action in the list of actions, from which you want to start listing your actions. For example, if you have three actions, the first action is assigned position number 0, the second action is assigned position number 1, and so forth. If you have 6 actions and you want to list the details for actions 2-6, enter 1. To limit the number of actions that is returned, use the `limit` option in addition to the `offset` option. Negative numbers are not supported and are ignored.
	Offset *int `json:"offset,omitempty"`

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// DeleteWorkspaceActivityParams defines parameters for DeleteWorkspaceActivity.
type DeleteWorkspaceActivityParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetWorkspaceActivityParams defines parameters for GetWorkspaceActivity.
type GetWorkspaceActivityParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetWorkspaceActivityLogsParams defines parameters for GetWorkspaceActivityLogs.
type GetWorkspaceActivityLogsParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// ApplyWorkspaceCommandJSONBody defines parameters for ApplyWorkspaceCommand.
type ApplyWorkspaceCommandJSONBody WorkspaceActivityOptions

// ApplyWorkspaceCommandParams defines parameters for ApplyWorkspaceCommand.
type ApplyWorkspaceCommandParams struct {

	// The IAM delegated token for your IBM Cloud account. This token is required for requests that are sent via the UI only.
	DelegatedToken *string `json:"delegated_token,omitempty"`

	// The IAM refresh token is required only if you want to delete all the Terraform resources before deleting the Schematics workspace. If you want to delete the workspace only and keep all your Terraform resources, refresh token is not required.
	//
	//  **Retrieving refresh token**:
	//  * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
	//  * For more information, about creating IAM access token and API Docs, refer, [IAM access token](https://cloud.ibm.com/apidocs/iam-identity-token-api#gettoken-password) and [Create API key](https://cloud.ibm.com/apidocs/iam-identity-token-api#create-api-key).
	//
	//  **Limitation**:
	//  * If the token is expired, you can use `refresh token` to get a new IAM access token.
	//  * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
	//  * When the IAM access token is about to expire, use the API key to create a new access token.
	RefreshToken string `json:"refresh_token"`

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// DestroyWorkspaceCommandJSONBody defines parameters for DestroyWorkspaceCommand.
type DestroyWorkspaceCommandJSONBody WorkspaceActivityOptions

// DestroyWorkspaceCommandParams defines parameters for DestroyWorkspaceCommand.
type DestroyWorkspaceCommandParams struct {

	// The IAM delegated token for your IBM Cloud account. This token is required for requests that are sent via the UI only.
	DelegatedToken *string `json:"delegated_token,omitempty"`

	// The IAM refresh token is required only if you want to delete all the Terraform resources before deleting the Schematics workspace. If you want to delete the workspace only and keep all your Terraform resources, refresh token is not required.
	//
	//  **Retrieving refresh token**:
	//  * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
	//  * For more information, about creating IAM access token and API Docs, refer, [IAM access token](https://cloud.ibm.com/apidocs/iam-identity-token-api#gettoken-password) and [Create API key](https://cloud.ibm.com/apidocs/iam-identity-token-api#create-api-key).
	//
	//  **Limitation**:
	//  * If the token is expired, you can use `refresh token` to get a new IAM access token.
	//  * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
	//  * When the IAM access token is about to expire, use the API key to create a new access token.
	RefreshToken string `json:"refresh_token"`

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetWorkspaceLogUrlsParams defines parameters for GetWorkspaceLogUrls.
type GetWorkspaceLogUrlsParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetWorkspaceOutputsParams defines parameters for GetWorkspaceOutputs.
type GetWorkspaceOutputsParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// PlanWorkspaceCommandParams defines parameters for PlanWorkspaceCommand.
type PlanWorkspaceCommandParams struct {

	// The IAM delegated token for your IBM Cloud account. This token is required for requests that are sent via the UI only.
	DelegatedToken *string `json:"delegated_token,omitempty"`

	// The IAM refresh token is required only if you want to delete all the Terraform resources before deleting the Schematics workspace. If you want to delete the workspace only and keep all your Terraform resources, refresh token is not required.
	//
	//  **Retrieving refresh token**:
	//  * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
	//  * For more information, about creating IAM access token and API Docs, refer, [IAM access token](https://cloud.ibm.com/apidocs/iam-identity-token-api#gettoken-password) and [Create API key](https://cloud.ibm.com/apidocs/iam-identity-token-api#create-api-key).
	//
	//  **Limitation**:
	//  * If the token is expired, you can use `refresh token` to get a new IAM access token.
	//  * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
	//  * When the IAM access token is about to expire, use the API key to create a new access token.
	RefreshToken string `json:"refresh_token"`

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// RefreshWorkspaceCommandParams defines parameters for RefreshWorkspaceCommand.
type RefreshWorkspaceCommandParams struct {

	// The IAM delegated token for your IBM Cloud account. This token is required for requests that are sent via the UI only.
	DelegatedToken *string `json:"delegated_token,omitempty"`

	// The IAM refresh token is required only if you want to delete all the Terraform resources before deleting the Schematics workspace. If you want to delete the workspace only and keep all your Terraform resources, refresh token is not required.
	//
	//  **Retrieving refresh token**:
	//  * Use `export IBMCLOUD_API_KEY=<ibmcloud_api_key>`, and execute `curl -X POST "https://iam.cloud.ibm.com/identity/token" -H "Content-Type: application/x-www-form-urlencoded" -d "grant_type=urn:ibm:params:oauth:grant-type:apikey&apikey=$IBMCLOUD_API_KEY" -u bx:bx`.
	//  * For more information, about creating IAM access token and API Docs, refer, [IAM access token](https://cloud.ibm.com/apidocs/iam-identity-token-api#gettoken-password) and [Create API key](https://cloud.ibm.com/apidocs/iam-identity-token-api#create-api-key).
	//
	//  **Limitation**:
	//  * If the token is expired, you can use `refresh token` to get a new IAM access token.
	//  * The `refresh_token` parameter cannot be used to retrieve a new IAM access token.
	//  * When the IAM access token is about to expire, use the API key to create a new access token.
	RefreshToken string `json:"refresh_token"`

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetWorkspaceResourcesParams defines parameters for GetWorkspaceResources.
type GetWorkspaceResourcesParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetTemplateLogsParams defines parameters for GetTemplateLogs.
type GetTemplateLogsParams struct {

	// Enter `false` to replace the first line in each Terraform command section, such as `Terraform INIT` or `Terraform PLAN`, with `Schematics INIT` (`Schematics PLAN`) in your log output. In addition, the log lines `Starting command: terraform init -input=false -no-color` and `Starting command: terraform apply -state=terraform.tfstate -var-file=schematics.tfvars -auto-approve -no-color` are suppressed. All subsequent command lines still use the Terraform command prefix. To remove this prefix, use the `log_tf_prefix` option.
	LogTfCmd *string `json:"log_tf_cmd,omitempty"`

	// Enter `false` to remove all Terraform command prefixes from each Terraform command section of your log output.
	LogTfPrefix *string `json:"log_tf_prefix,omitempty"`

	// Enter `false` to remove any `null_resource` log lines from your log output. This option can be used only if you defined a `null_resource` in your Terraform configuration file.
	LogTfNullResource *string `json:"log_tf_null_resource,omitempty"`

	// Enter `true` to show a new line instead of `
	// ` for multi-line Ansible logs. This option is available only if you run Ansible code that creates Ansible log output.
	LogTfAnsible *string `json:"log_tf_ansible,omitempty"`

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetTemplateActivityLogParams defines parameters for GetTemplateActivityLog.
type GetTemplateActivityLogParams struct {

	// Enter `false` to replace the first line in each Terraform command section, such as `Terraform INIT` or `Terraform PLAN`, with `Schematics INIT` (`Schematics PLAN`) in your log output. In addition, the log lines `Starting command: terraform init -input=false -no-color` and `Starting command: terraform apply -state=terraform.tfstate -var-file=schematics.tfvars -auto-approve -no-color` are suppressed. All subsequent command lines still use the Terraform command prefix. To remove this prefix, use the `log_tf_prefix` option.
	LogTfCmd *string `json:"log_tf_cmd,omitempty"`

	// Enter `false` to remove all Terraform command prefixes from each Terraform command section of your log output.
	LogTfPrefix *string `json:"log_tf_prefix,omitempty"`

	// Enter `false` to remove any `null_resource` log lines from your log output. This option can be used only if you defined a `null_resource` in your Terraform configuration file.
	LogTfNullResource *string `json:"log_tf_null_resource,omitempty"`

	// Enter `true` to show a new line instead of `\n` for multi-line Ansible logs. This option is available only if you run Ansible code that creates Ansible log output.
	LogTfAnsible *string `json:"log_tf_ansible,omitempty"`

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetWorkspaceTemplateStateParams defines parameters for GetWorkspaceTemplateState.
type GetWorkspaceTemplateStateParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetWorkspaceStateParams defines parameters for GetWorkspaceState.
type GetWorkspaceStateParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetWorkspaceInputsParams defines parameters for GetWorkspaceInputs.
type GetWorkspaceInputsParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// ReplaceWorkspaceInputsJSONBody defines parameters for ReplaceWorkspaceInputs.
type ReplaceWorkspaceInputsJSONBody UserValuesRequest

// ReplaceWorkspaceInputsParams defines parameters for ReplaceWorkspaceInputs.
type ReplaceWorkspaceInputsParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetWorkspaceInputMetadataParams defines parameters for GetWorkspaceInputMetadata.
type GetWorkspaceInputMetadataParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetWorkspaceReadmeParams defines parameters for GetWorkspaceReadme.
type GetWorkspaceReadmeParams struct {

	// The GitHub or GitLab branch where the `README.md` file is stored, or the commit ID or tag that references the `README.md` file that you want to retrieve. If you do not specify this option, the `README.md` file is retrieved from the master branch by default.
	Ref *string `json:"ref,omitempty"`

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// GetAllWorkspaceInputsParams defines parameters for GetAllWorkspaceInputs.
type GetAllWorkspaceInputsParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// UploadTemplateTarParams defines parameters for UploadTemplateTar.
type UploadTemplateTarParams struct {

	// The IAM access token for your IBM Cloud account. To retrieve the token, run `ibmcloud iam oauth-tokens` in the IBM Cloud CLI.
	Authorization string `json:"Authorization"`
}

// CreateWorkspaceRequestBody defines body for CreateWorkspace for application/json ContentType.
type CreateWorkspaceJSONRequestBody CreateWorkspaceJSONBody

// UpdateWorkspaceRequestBody defines body for UpdateWorkspace for application/json ContentType.
type UpdateWorkspaceJSONRequestBody UpdateWorkspaceJSONBody

// ReplaceWorkspaceRequestBody defines body for ReplaceWorkspace for application/json ContentType.
type ReplaceWorkspaceJSONRequestBody ReplaceWorkspaceJSONBody

// ApplyWorkspaceCommandRequestBody defines body for ApplyWorkspaceCommand for application/json ContentType.
type ApplyWorkspaceCommandJSONRequestBody ApplyWorkspaceCommandJSONBody

// DestroyWorkspaceCommandRequestBody defines body for DestroyWorkspaceCommand for application/json ContentType.
type DestroyWorkspaceCommandJSONRequestBody DestroyWorkspaceCommandJSONBody

// ReplaceWorkspaceInputsRequestBody defines body for ReplaceWorkspaceInputs for application/json ContentType.
type ReplaceWorkspaceInputsJSONRequestBody ReplaceWorkspaceInputsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListSchematicsLocation request
	ListSchematicsLocation(ctx context.Context, params *ListSchematicsLocationParams) (*http.Response, error)

	// ListResourceGroup request
	ListResourceGroup(ctx context.Context, params *ListResourceGroupParams) (*http.Response, error)

	// GetSchematicsVersion request
	GetSchematicsVersion(ctx context.Context) (*http.Response, error)

	// ListWorkspaces request
	ListWorkspaces(ctx context.Context, params *ListWorkspacesParams) (*http.Response, error)

	// CreateWorkspace request  with any body
	CreateWorkspaceWithBody(ctx context.Context, params *CreateWorkspaceParams, contentType string, body io.Reader) (*http.Response, error)

	CreateWorkspace(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceJSONRequestBody) (*http.Response, error)

	// DeleteWorkspace request
	DeleteWorkspace(ctx context.Context, wId string, params *DeleteWorkspaceParams) (*http.Response, error)

	// GetWorkspace request
	GetWorkspace(ctx context.Context, wId string, params *GetWorkspaceParams) (*http.Response, error)

	// UpdateWorkspace request  with any body
	UpdateWorkspaceWithBody(ctx context.Context, wId string, params *UpdateWorkspaceParams, contentType string, body io.Reader) (*http.Response, error)

	UpdateWorkspace(ctx context.Context, wId string, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody) (*http.Response, error)

	// ReplaceWorkspace request  with any body
	ReplaceWorkspaceWithBody(ctx context.Context, wId string, params *ReplaceWorkspaceParams, contentType string, body io.Reader) (*http.Response, error)

	ReplaceWorkspace(ctx context.Context, wId string, params *ReplaceWorkspaceParams, body ReplaceWorkspaceJSONRequestBody) (*http.Response, error)

	// ListWorkspaceActivities request
	ListWorkspaceActivities(ctx context.Context, wId string, params *ListWorkspaceActivitiesParams) (*http.Response, error)

	// DeleteWorkspaceActivity request
	DeleteWorkspaceActivity(ctx context.Context, wId string, activityId string, params *DeleteWorkspaceActivityParams) (*http.Response, error)

	// GetWorkspaceActivity request
	GetWorkspaceActivity(ctx context.Context, wId string, activityId string, params *GetWorkspaceActivityParams) (*http.Response, error)

	// GetWorkspaceActivityLogs request
	GetWorkspaceActivityLogs(ctx context.Context, wId string, activityId string, params *GetWorkspaceActivityLogsParams) (*http.Response, error)

	// ApplyWorkspaceCommand request  with any body
	ApplyWorkspaceCommandWithBody(ctx context.Context, wId string, params *ApplyWorkspaceCommandParams, contentType string, body io.Reader) (*http.Response, error)

	ApplyWorkspaceCommand(ctx context.Context, wId string, params *ApplyWorkspaceCommandParams, body ApplyWorkspaceCommandJSONRequestBody) (*http.Response, error)

	// DestroyWorkspaceCommand request  with any body
	DestroyWorkspaceCommandWithBody(ctx context.Context, wId string, params *DestroyWorkspaceCommandParams, contentType string, body io.Reader) (*http.Response, error)

	DestroyWorkspaceCommand(ctx context.Context, wId string, params *DestroyWorkspaceCommandParams, body DestroyWorkspaceCommandJSONRequestBody) (*http.Response, error)

	// GetWorkspaceLogUrls request
	GetWorkspaceLogUrls(ctx context.Context, wId string, params *GetWorkspaceLogUrlsParams) (*http.Response, error)

	// GetWorkspaceOutputs request
	GetWorkspaceOutputs(ctx context.Context, wId string, params *GetWorkspaceOutputsParams) (*http.Response, error)

	// PlanWorkspaceCommand request
	PlanWorkspaceCommand(ctx context.Context, wId string, params *PlanWorkspaceCommandParams) (*http.Response, error)

	// RefreshWorkspaceCommand request
	RefreshWorkspaceCommand(ctx context.Context, wId string, params *RefreshWorkspaceCommandParams) (*http.Response, error)

	// GetWorkspaceResources request
	GetWorkspaceResources(ctx context.Context, wId string, params *GetWorkspaceResourcesParams) (*http.Response, error)

	// GetTemplateLogs request
	GetTemplateLogs(ctx context.Context, wId string, tId string, params *GetTemplateLogsParams) (*http.Response, error)

	// GetTemplateActivityLog request
	GetTemplateActivityLog(ctx context.Context, wId string, tId string, activityId string, params *GetTemplateActivityLogParams) (*http.Response, error)

	// GetWorkspaceTemplateState request
	GetWorkspaceTemplateState(ctx context.Context, wId string, tId string, params *GetWorkspaceTemplateStateParams) (*http.Response, error)

	// GetWorkspaceState request
	GetWorkspaceState(ctx context.Context, wId string, params *GetWorkspaceStateParams) (*http.Response, error)

	// GetWorkspaceInputs request
	GetWorkspaceInputs(ctx context.Context, wId string, tId string, params *GetWorkspaceInputsParams) (*http.Response, error)

	// ReplaceWorkspaceInputs request  with any body
	ReplaceWorkspaceInputsWithBody(ctx context.Context, wId string, tId string, params *ReplaceWorkspaceInputsParams, contentType string, body io.Reader) (*http.Response, error)

	ReplaceWorkspaceInputs(ctx context.Context, wId string, tId string, params *ReplaceWorkspaceInputsParams, body ReplaceWorkspaceInputsJSONRequestBody) (*http.Response, error)

	// GetWorkspaceInputMetadata request
	GetWorkspaceInputMetadata(ctx context.Context, wId string, tId string, params *GetWorkspaceInputMetadataParams) (*http.Response, error)

	// GetWorkspaceReadme request
	GetWorkspaceReadme(ctx context.Context, wId string, params *GetWorkspaceReadmeParams) (*http.Response, error)

	// GetAllWorkspaceInputs request
	GetAllWorkspaceInputs(ctx context.Context, wId string, params *GetAllWorkspaceInputsParams) (*http.Response, error)

	// UploadTemplateTar request  with any body
	UploadTemplateTarWithBody(ctx context.Context, wId string, tId string, params *UploadTemplateTarParams, contentType string, body io.Reader) (*http.Response, error)
}

func (c *Client) ListSchematicsLocation(ctx context.Context, params *ListSchematicsLocationParams) (*http.Response, error) {
	req, err := NewListSchematicsLocationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListResourceGroup(ctx context.Context, params *ListResourceGroupParams) (*http.Response, error) {
	req, err := NewListResourceGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchematicsVersion(ctx context.Context) (*http.Response, error) {
	req, err := NewGetSchematicsVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaces(ctx context.Context, params *ListWorkspacesParams) (*http.Response, error) {
	req, err := NewListWorkspacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceWithBody(ctx context.Context, params *CreateWorkspaceParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspace(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspace(ctx context.Context, wId string, params *DeleteWorkspaceParams) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, wId string, params *GetWorkspaceParams) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, wId string, params *UpdateWorkspaceParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequestWithBody(c.Server, wId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspace(ctx context.Context, wId string, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequest(c.Server, wId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceWorkspaceWithBody(ctx context.Context, wId string, params *ReplaceWorkspaceParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplaceWorkspaceRequestWithBody(c.Server, wId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceWorkspace(ctx context.Context, wId string, params *ReplaceWorkspaceParams, body ReplaceWorkspaceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplaceWorkspaceRequest(c.Server, wId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaceActivities(ctx context.Context, wId string, params *ListWorkspaceActivitiesParams) (*http.Response, error) {
	req, err := NewListWorkspaceActivitiesRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspaceActivity(ctx context.Context, wId string, activityId string, params *DeleteWorkspaceActivityParams) (*http.Response, error) {
	req, err := NewDeleteWorkspaceActivityRequest(c.Server, wId, activityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceActivity(ctx context.Context, wId string, activityId string, params *GetWorkspaceActivityParams) (*http.Response, error) {
	req, err := NewGetWorkspaceActivityRequest(c.Server, wId, activityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceActivityLogs(ctx context.Context, wId string, activityId string, params *GetWorkspaceActivityLogsParams) (*http.Response, error) {
	req, err := NewGetWorkspaceActivityLogsRequest(c.Server, wId, activityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyWorkspaceCommandWithBody(ctx context.Context, wId string, params *ApplyWorkspaceCommandParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewApplyWorkspaceCommandRequestWithBody(c.Server, wId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyWorkspaceCommand(ctx context.Context, wId string, params *ApplyWorkspaceCommandParams, body ApplyWorkspaceCommandJSONRequestBody) (*http.Response, error) {
	req, err := NewApplyWorkspaceCommandRequest(c.Server, wId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyWorkspaceCommandWithBody(ctx context.Context, wId string, params *DestroyWorkspaceCommandParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDestroyWorkspaceCommandRequestWithBody(c.Server, wId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyWorkspaceCommand(ctx context.Context, wId string, params *DestroyWorkspaceCommandParams, body DestroyWorkspaceCommandJSONRequestBody) (*http.Response, error) {
	req, err := NewDestroyWorkspaceCommandRequest(c.Server, wId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceLogUrls(ctx context.Context, wId string, params *GetWorkspaceLogUrlsParams) (*http.Response, error) {
	req, err := NewGetWorkspaceLogUrlsRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceOutputs(ctx context.Context, wId string, params *GetWorkspaceOutputsParams) (*http.Response, error) {
	req, err := NewGetWorkspaceOutputsRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PlanWorkspaceCommand(ctx context.Context, wId string, params *PlanWorkspaceCommandParams) (*http.Response, error) {
	req, err := NewPlanWorkspaceCommandRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshWorkspaceCommand(ctx context.Context, wId string, params *RefreshWorkspaceCommandParams) (*http.Response, error) {
	req, err := NewRefreshWorkspaceCommandRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceResources(ctx context.Context, wId string, params *GetWorkspaceResourcesParams) (*http.Response, error) {
	req, err := NewGetWorkspaceResourcesRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTemplateLogs(ctx context.Context, wId string, tId string, params *GetTemplateLogsParams) (*http.Response, error) {
	req, err := NewGetTemplateLogsRequest(c.Server, wId, tId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTemplateActivityLog(ctx context.Context, wId string, tId string, activityId string, params *GetTemplateActivityLogParams) (*http.Response, error) {
	req, err := NewGetTemplateActivityLogRequest(c.Server, wId, tId, activityId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceTemplateState(ctx context.Context, wId string, tId string, params *GetWorkspaceTemplateStateParams) (*http.Response, error) {
	req, err := NewGetWorkspaceTemplateStateRequest(c.Server, wId, tId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceState(ctx context.Context, wId string, params *GetWorkspaceStateParams) (*http.Response, error) {
	req, err := NewGetWorkspaceStateRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceInputs(ctx context.Context, wId string, tId string, params *GetWorkspaceInputsParams) (*http.Response, error) {
	req, err := NewGetWorkspaceInputsRequest(c.Server, wId, tId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceWorkspaceInputsWithBody(ctx context.Context, wId string, tId string, params *ReplaceWorkspaceInputsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplaceWorkspaceInputsRequestWithBody(c.Server, wId, tId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceWorkspaceInputs(ctx context.Context, wId string, tId string, params *ReplaceWorkspaceInputsParams, body ReplaceWorkspaceInputsJSONRequestBody) (*http.Response, error) {
	req, err := NewReplaceWorkspaceInputsRequest(c.Server, wId, tId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceInputMetadata(ctx context.Context, wId string, tId string, params *GetWorkspaceInputMetadataParams) (*http.Response, error) {
	req, err := NewGetWorkspaceInputMetadataRequest(c.Server, wId, tId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceReadme(ctx context.Context, wId string, params *GetWorkspaceReadmeParams) (*http.Response, error) {
	req, err := NewGetWorkspaceReadmeRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllWorkspaceInputs(ctx context.Context, wId string, params *GetAllWorkspaceInputsParams) (*http.Response, error) {
	req, err := NewGetAllWorkspaceInputsRequest(c.Server, wId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UploadTemplateTarWithBody(ctx context.Context, wId string, tId string, params *UploadTemplateTarParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUploadTemplateTarRequestWithBody(c.Server, wId, tId, params, contentType, body)
	fmt.Printf("[DEBUG] request: %+v\n", req)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewListSchematicsLocationRequest generates requests for ListSchematicsLocation
func NewListSchematicsLocationRequest(server string, params *ListSchematicsLocationParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/locations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewListResourceGroupRequest generates requests for ListResourceGroup
func NewListResourceGroupRequest(server string, params *ListResourceGroupParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/resource_groups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetSchematicsVersionRequest generates requests for GetSchematicsVersion
func NewGetSchematicsVersionRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/version")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWorkspacesRequest generates requests for ListWorkspaces
func NewListWorkspacesRequest(server string, params *ListWorkspacesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewCreateWorkspaceRequest calls the generic CreateWorkspace builder with application/json body
func NewCreateWorkspaceRequest(server string, params *CreateWorkspaceParams, body CreateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkspaceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateWorkspaceRequestWithBody generates requests for CreateWorkspace with any type of body
func NewCreateWorkspaceRequestWithBody(server string, params *CreateWorkspaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	if params.XGithubToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParam("simple", false, "X-Github-token", *params.XGithubToken)
		if err != nil {
			return nil, err
		}

		req.Header.Add("X-Github-token", headerParam1)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteWorkspaceRequest generates requests for DeleteWorkspace
func NewDeleteWorkspaceRequest(server string, wId string, params *DeleteWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.DestroyResources != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "destroyResources", *params.DestroyResources); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	if params.RefreshToken != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParam("simple", false, "refresh_token", *params.RefreshToken)
		if err != nil {
			return nil, err
		}

		req.Header.Add("refresh_token", headerParam1)
	}

	return req, nil
}

// NewGetWorkspaceRequest generates requests for GetWorkspace
func NewGetWorkspaceRequest(server string, wId string, params *GetWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, wId string, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceRequestWithBody(server, wId, params, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, wId string, params *UpdateWorkspaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplaceWorkspaceRequest calls the generic ReplaceWorkspace builder with application/json body
func NewReplaceWorkspaceRequest(server string, wId string, params *ReplaceWorkspaceParams, body ReplaceWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceWorkspaceRequestWithBody(server, wId, params, "application/json", bodyReader)
}

// NewReplaceWorkspaceRequestWithBody generates requests for ReplaceWorkspace with any type of body
func NewReplaceWorkspaceRequestWithBody(server string, wId string, params *ReplaceWorkspaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewListWorkspaceActivitiesRequest generates requests for ListWorkspaceActivities
func NewListWorkspaceActivitiesRequest(server string, wId string, params *ListWorkspaceActivitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/actions", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewDeleteWorkspaceActivityRequest generates requests for DeleteWorkspaceActivity
func NewDeleteWorkspaceActivityRequest(server string, wId string, activityId string, params *DeleteWorkspaceActivityParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "activity_id", activityId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/actions/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetWorkspaceActivityRequest generates requests for GetWorkspaceActivity
func NewGetWorkspaceActivityRequest(server string, wId string, activityId string, params *GetWorkspaceActivityParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "activity_id", activityId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/actions/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetWorkspaceActivityLogsRequest generates requests for GetWorkspaceActivityLogs
func NewGetWorkspaceActivityLogsRequest(server string, wId string, activityId string, params *GetWorkspaceActivityLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "activity_id", activityId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/actions/%s/logs", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewApplyWorkspaceCommandRequest calls the generic ApplyWorkspaceCommand builder with application/json body
func NewApplyWorkspaceCommandRequest(server string, wId string, params *ApplyWorkspaceCommandParams, body ApplyWorkspaceCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplyWorkspaceCommandRequestWithBody(server, wId, params, "application/json", bodyReader)
}

// NewApplyWorkspaceCommandRequestWithBody generates requests for ApplyWorkspaceCommand with any type of body
func NewApplyWorkspaceCommandRequestWithBody(server string, wId string, params *ApplyWorkspaceCommandParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/apply", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	if params.DelegatedToken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "delegated_token", *params.DelegatedToken)
		if err != nil {
			return nil, err
		}

		req.Header.Add("delegated_token", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "refresh_token", params.RefreshToken)
	if err != nil {
		return nil, err
	}

	req.Header.Add("refresh_token", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam2)

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDestroyWorkspaceCommandRequest calls the generic DestroyWorkspaceCommand builder with application/json body
func NewDestroyWorkspaceCommandRequest(server string, wId string, params *DestroyWorkspaceCommandParams, body DestroyWorkspaceCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDestroyWorkspaceCommandRequestWithBody(server, wId, params, "application/json", bodyReader)
}

// NewDestroyWorkspaceCommandRequestWithBody generates requests for DestroyWorkspaceCommand with any type of body
func NewDestroyWorkspaceCommandRequestWithBody(server string, wId string, params *DestroyWorkspaceCommandParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/destroy", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	if params.DelegatedToken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "delegated_token", *params.DelegatedToken)
		if err != nil {
			return nil, err
		}

		req.Header.Add("delegated_token", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "refresh_token", params.RefreshToken)
	if err != nil {
		return nil, err
	}

	req.Header.Add("refresh_token", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam2)

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetWorkspaceLogUrlsRequest generates requests for GetWorkspaceLogUrls
func NewGetWorkspaceLogUrlsRequest(server string, wId string, params *GetWorkspaceLogUrlsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/log_stores", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetWorkspaceOutputsRequest generates requests for GetWorkspaceOutputs
func NewGetWorkspaceOutputsRequest(server string, wId string, params *GetWorkspaceOutputsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/output_values", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewPlanWorkspaceCommandRequest generates requests for PlanWorkspaceCommand
func NewPlanWorkspaceCommandRequest(server string, wId string, params *PlanWorkspaceCommandParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/plan", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.DelegatedToken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "delegated_token", *params.DelegatedToken)
		if err != nil {
			return nil, err
		}

		req.Header.Add("delegated_token", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "refresh_token", params.RefreshToken)
	if err != nil {
		return nil, err
	}

	req.Header.Add("refresh_token", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam2)

	return req, nil
}

// NewRefreshWorkspaceCommandRequest generates requests for RefreshWorkspaceCommand
func NewRefreshWorkspaceCommandRequest(server string, wId string, params *RefreshWorkspaceCommandParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/refresh", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.DelegatedToken != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "delegated_token", *params.DelegatedToken)
		if err != nil {
			return nil, err
		}

		req.Header.Add("delegated_token", headerParam0)
	}

	var headerParam1 string

	headerParam1, err = runtime.StyleParam("simple", false, "refresh_token", params.RefreshToken)
	if err != nil {
		return nil, err
	}

	req.Header.Add("refresh_token", headerParam1)

	var headerParam2 string

	headerParam2, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam2)

	return req, nil
}

// NewGetWorkspaceResourcesRequest generates requests for GetWorkspaceResources
func NewGetWorkspaceResourcesRequest(server string, wId string, params *GetWorkspaceResourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/resources", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetTemplateLogsRequest generates requests for GetTemplateLogs
func NewGetTemplateLogsRequest(server string, wId string, tId string, params *GetTemplateLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "t_id", tId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/runtime_data/%s/log_store", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.LogTfCmd != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "log_tf_cmd", *params.LogTfCmd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LogTfPrefix != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "log_tf_prefix", *params.LogTfPrefix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LogTfNullResource != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "log_tf_null_resource", *params.LogTfNullResource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LogTfAnsible != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "log_tf_ansible", *params.LogTfAnsible); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetTemplateActivityLogRequest generates requests for GetTemplateActivityLog
func NewGetTemplateActivityLogRequest(server string, wId string, tId string, activityId string, params *GetTemplateActivityLogParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "t_id", tId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "activity_id", activityId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/runtime_data/%s/log_store/actions/%s", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.LogTfCmd != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "log_tf_cmd", *params.LogTfCmd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LogTfPrefix != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "log_tf_prefix", *params.LogTfPrefix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LogTfNullResource != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "log_tf_null_resource", *params.LogTfNullResource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LogTfAnsible != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "log_tf_ansible", *params.LogTfAnsible); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetWorkspaceTemplateStateRequest generates requests for GetWorkspaceTemplateState
func NewGetWorkspaceTemplateStateRequest(server string, wId string, tId string, params *GetWorkspaceTemplateStateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "t_id", tId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/runtime_data/%s/state_store", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetWorkspaceStateRequest generates requests for GetWorkspaceState
func NewGetWorkspaceStateRequest(server string, wId string, params *GetWorkspaceStateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/state_stores", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetWorkspaceInputsRequest generates requests for GetWorkspaceInputs
func NewGetWorkspaceInputsRequest(server string, wId string, tId string, params *GetWorkspaceInputsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "t_id", tId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/template_data/%s/values", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewReplaceWorkspaceInputsRequest calls the generic ReplaceWorkspaceInputs builder with application/json body
func NewReplaceWorkspaceInputsRequest(server string, wId string, tId string, params *ReplaceWorkspaceInputsParams, body ReplaceWorkspaceInputsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceWorkspaceInputsRequestWithBody(server, wId, tId, params, "application/json", bodyReader)
}

// NewReplaceWorkspaceInputsRequestWithBody generates requests for ReplaceWorkspaceInputs with any type of body
func NewReplaceWorkspaceInputsRequestWithBody(server string, wId string, tId string, params *ReplaceWorkspaceInputsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "t_id", tId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/template_data/%s/values", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetWorkspaceInputMetadataRequest generates requests for GetWorkspaceInputMetadata
func NewGetWorkspaceInputMetadataRequest(server string, wId string, tId string, params *GetWorkspaceInputMetadataParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "t_id", tId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/template_data/%s/values_metadata", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetWorkspaceReadmeRequest generates requests for GetWorkspaceReadme
func NewGetWorkspaceReadmeRequest(server string, wId string, params *GetWorkspaceReadmeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/templates/readme", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Ref != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ref", *params.Ref); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewGetAllWorkspaceInputsRequest generates requests for GetAllWorkspaceInputs
func NewGetAllWorkspaceInputsRequest(server string, wId string, params *GetAllWorkspaceInputsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/templates/values", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	return req, nil
}

// NewUploadTemplateTarRequestWithBody generates requests for UploadTemplateTar with any type of body
func NewUploadTemplateTarRequestWithBody(server string, wId string, tId string, params *UploadTemplateTarParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "w_id", wId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "t_id", tId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/workspaces/%s/templates/%s/template_repo_upload", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParam("simple", false, "Authorization", params.Authorization)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Authorization", headerParam0)

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListSchematicsLocation request
	ListSchematicsLocationWithResponse(ctx context.Context, params *ListSchematicsLocationParams) (*ListSchematicsLocationResponse, error)

	// ListResourceGroup request
	ListResourceGroupWithResponse(ctx context.Context, params *ListResourceGroupParams) (*ListResourceGroupResponse, error)

	// GetSchematicsVersion request
	GetSchematicsVersionWithResponse(ctx context.Context) (*GetSchematicsVersionResponse, error)

	// ListWorkspaces request
	ListWorkspacesWithResponse(ctx context.Context, params *ListWorkspacesParams) (*ListWorkspacesResponse, error)

	// CreateWorkspace request  with any body
	CreateWorkspaceWithBodyWithResponse(ctx context.Context, params *CreateWorkspaceParams, contentType string, body io.Reader) (*CreateWorkspaceResponse, error)

	CreateWorkspaceWithResponse(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceJSONRequestBody) (*CreateWorkspaceResponse, error)

	// DeleteWorkspace request
	DeleteWorkspaceWithResponse(ctx context.Context, wId string, params *DeleteWorkspaceParams) (*DeleteWorkspaceResponse, error)

	// GetWorkspace request
	GetWorkspaceWithResponse(ctx context.Context, wId string, params *GetWorkspaceParams) (*GetWorkspaceResponse, error)

	// UpdateWorkspace request  with any body
	UpdateWorkspaceWithBodyWithResponse(ctx context.Context, wId string, params *UpdateWorkspaceParams, contentType string, body io.Reader) (*UpdateWorkspaceResponse, error)

	UpdateWorkspaceWithResponse(ctx context.Context, wId string, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody) (*UpdateWorkspaceResponse, error)

	// ReplaceWorkspace request  with any body
	ReplaceWorkspaceWithBodyWithResponse(ctx context.Context, wId string, params *ReplaceWorkspaceParams, contentType string, body io.Reader) (*ReplaceWorkspaceResponse, error)

	ReplaceWorkspaceWithResponse(ctx context.Context, wId string, params *ReplaceWorkspaceParams, body ReplaceWorkspaceJSONRequestBody) (*ReplaceWorkspaceResponse, error)

	// ListWorkspaceActivities request
	ListWorkspaceActivitiesWithResponse(ctx context.Context, wId string, params *ListWorkspaceActivitiesParams) (*ListWorkspaceActivitiesResponse, error)

	// DeleteWorkspaceActivity request
	DeleteWorkspaceActivityWithResponse(ctx context.Context, wId string, activityId string, params *DeleteWorkspaceActivityParams) (*DeleteWorkspaceActivityResponse, error)

	// GetWorkspaceActivity request
	GetWorkspaceActivityWithResponse(ctx context.Context, wId string, activityId string, params *GetWorkspaceActivityParams) (*GetWorkspaceActivityResponse, error)

	// GetWorkspaceActivityLogs request
	GetWorkspaceActivityLogsWithResponse(ctx context.Context, wId string, activityId string, params *GetWorkspaceActivityLogsParams) (*GetWorkspaceActivityLogsResponse, error)

	// ApplyWorkspaceCommand request  with any body
	ApplyWorkspaceCommandWithBodyWithResponse(ctx context.Context, wId string, params *ApplyWorkspaceCommandParams, contentType string, body io.Reader) (*ApplyWorkspaceCommandResponse, error)

	ApplyWorkspaceCommandWithResponse(ctx context.Context, wId string, params *ApplyWorkspaceCommandParams, body ApplyWorkspaceCommandJSONRequestBody) (*ApplyWorkspaceCommandResponse, error)

	// DestroyWorkspaceCommand request  with any body
	DestroyWorkspaceCommandWithBodyWithResponse(ctx context.Context, wId string, params *DestroyWorkspaceCommandParams, contentType string, body io.Reader) (*DestroyWorkspaceCommandResponse, error)

	DestroyWorkspaceCommandWithResponse(ctx context.Context, wId string, params *DestroyWorkspaceCommandParams, body DestroyWorkspaceCommandJSONRequestBody) (*DestroyWorkspaceCommandResponse, error)

	// GetWorkspaceLogUrls request
	GetWorkspaceLogUrlsWithResponse(ctx context.Context, wId string, params *GetWorkspaceLogUrlsParams) (*GetWorkspaceLogUrlsResponse, error)

	// GetWorkspaceOutputs request
	GetWorkspaceOutputsWithResponse(ctx context.Context, wId string, params *GetWorkspaceOutputsParams) (*GetWorkspaceOutputsResponse, error)

	// PlanWorkspaceCommand request
	PlanWorkspaceCommandWithResponse(ctx context.Context, wId string, params *PlanWorkspaceCommandParams) (*PlanWorkspaceCommandResponse, error)

	// RefreshWorkspaceCommand request
	RefreshWorkspaceCommandWithResponse(ctx context.Context, wId string, params *RefreshWorkspaceCommandParams) (*RefreshWorkspaceCommandResponse, error)

	// GetWorkspaceResources request
	GetWorkspaceResourcesWithResponse(ctx context.Context, wId string, params *GetWorkspaceResourcesParams) (*GetWorkspaceResourcesResponse, error)

	// GetTemplateLogs request
	GetTemplateLogsWithResponse(ctx context.Context, wId string, tId string, params *GetTemplateLogsParams) (*GetTemplateLogsResponse, error)

	// GetTemplateActivityLog request
	GetTemplateActivityLogWithResponse(ctx context.Context, wId string, tId string, activityId string, params *GetTemplateActivityLogParams) (*GetTemplateActivityLogResponse, error)

	// GetWorkspaceTemplateState request
	GetWorkspaceTemplateStateWithResponse(ctx context.Context, wId string, tId string, params *GetWorkspaceTemplateStateParams) (*GetWorkspaceTemplateStateResponse, error)

	// GetWorkspaceState request
	GetWorkspaceStateWithResponse(ctx context.Context, wId string, params *GetWorkspaceStateParams) (*GetWorkspaceStateResponse, error)

	// GetWorkspaceInputs request
	GetWorkspaceInputsWithResponse(ctx context.Context, wId string, tId string, params *GetWorkspaceInputsParams) (*GetWorkspaceInputsResponse, error)

	// ReplaceWorkspaceInputs request  with any body
	ReplaceWorkspaceInputsWithBodyWithResponse(ctx context.Context, wId string, tId string, params *ReplaceWorkspaceInputsParams, contentType string, body io.Reader) (*ReplaceWorkspaceInputsResponse, error)

	ReplaceWorkspaceInputsWithResponse(ctx context.Context, wId string, tId string, params *ReplaceWorkspaceInputsParams, body ReplaceWorkspaceInputsJSONRequestBody) (*ReplaceWorkspaceInputsResponse, error)

	// GetWorkspaceInputMetadata request
	GetWorkspaceInputMetadataWithResponse(ctx context.Context, wId string, tId string, params *GetWorkspaceInputMetadataParams) (*GetWorkspaceInputMetadataResponse, error)

	// GetWorkspaceReadme request
	GetWorkspaceReadmeWithResponse(ctx context.Context, wId string, params *GetWorkspaceReadmeParams) (*GetWorkspaceReadmeResponse, error)

	// GetAllWorkspaceInputs request
	GetAllWorkspaceInputsWithResponse(ctx context.Context, wId string, params *GetAllWorkspaceInputsParams) (*GetAllWorkspaceInputsResponse, error)

	// UploadTemplateTar request  with any body
	UploadTemplateTarWithBodyWithResponse(ctx context.Context, wId string, tId string, params *UploadTemplateTarParams, contentType string, body io.Reader) (*UploadTemplateTarResponse, error)
}

type ListSchematicsLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SchematicsLocations
	JSON401      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r ListSchematicsLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSchematicsLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourceGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceGroupResponse
	JSON401      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r ListResourceGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourceGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchematicsVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionResponse
}

// Status returns HTTPResponse.Status
func (r GetSchematicsVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchematicsVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceResponseList
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r ListWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkspaceResponse
	JSON400      *APIMessagePayload
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON409      *APIMessagePayload
	JSON429      *APIMessagePayload
	JSON500      *APIMessagePayload
	JSON503      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceDeleteResponse
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON409      *APIMessagePayload
	JSON429      *APIMessagePayload
	JSON500      *APIMessagePayload
	JSON503      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceResponse
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceResponse
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON409      *APIMessagePayload
	JSON429      *APIMessagePayload
	JSON500      *APIMessagePayload
	JSON503      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceResponse
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON409      *APIMessagePayload
	JSON429      *APIMessagePayload
	JSON500      *APIMessagePayload
	JSON503      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r ReplaceWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspaceActivitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceActivities
	JSON401      *WorkspaceActivities
	JSON403      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r ListWorkspaceActivitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspaceActivitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceActivityApplyResult
	JSON400      *APIMessagePayload
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON405      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceActivity
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceActivityLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceActivityLogs
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceActivityLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceActivityLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplyWorkspaceCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *WorkspaceActivityApplyResult
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON409      *APIMessagePayload
	JSON429      *APIMessagePayload
	JSON500      *APIMessagePayload
	JSON503      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r ApplyWorkspaceCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplyWorkspaceCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyWorkspaceCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *WorkspaceActivityDestroyResult
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON409      *APIMessagePayload
	JSON429      *APIMessagePayload
	JSON500      *APIMessagePayload
	JSON503      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r DestroyWorkspaceCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyWorkspaceCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceLogUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogStoreResponseList
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceLogUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceLogUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceOutputsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OutputValues
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceOutputsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceOutputsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlanWorkspaceCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *WorkspaceActivityPlanResult
	JSON400      *APIMessagePayload
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON409      *APIMessagePayload
	JSON500      *APIMessagePayload
	JSON503      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r PlanWorkspaceCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanWorkspaceCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshWorkspaceCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *WorkspaceActivityRefreshResult
	JSON400      *APIMessagePayload
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON409      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r RefreshWorkspaceCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshWorkspaceCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TemplateResourcesList
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTemplateLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TemplateLogStoreString
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetTemplateLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTemplateLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTemplateActivityLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceActivityTemplateLogString
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetTemplateActivityLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTemplateActivityLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceTemplateStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TemplateStateStore
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceTemplateStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceTemplateStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StateStoreResponseList
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceInputsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TemplateValues
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceInputsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceInputsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceWorkspaceInputsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserValues
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r ReplaceWorkspaceInputsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceWorkspaceInputsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceInputMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TemplateMetadata
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceInputMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceInputMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceReadmeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TemplateReadme
	JSON400      *APIMessagePayload
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceReadmeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceReadmeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllWorkspaceInputsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceTemplateValuesResponse
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r GetAllWorkspaceInputsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllWorkspaceInputsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadTemplateTarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TemplateRepoTarUploadResponse
	JSON400      *APIMessagePayload
	JSON401      *APIMessagePayload
	JSON403      *APIMessagePayload
	JSON404      *APIMessagePayload
	JSON500      *APIMessagePayload
}

// Status returns HTTPResponse.Status
func (r UploadTemplateTarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadTemplateTarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListSchematicsLocationWithResponse request returning *ListSchematicsLocationResponse
func (c *ClientWithResponses) ListSchematicsLocationWithResponse(ctx context.Context, params *ListSchematicsLocationParams) (*ListSchematicsLocationResponse, error) {
	rsp, err := c.ListSchematicsLocation(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListSchematicsLocationResponse(rsp)
}

// ListResourceGroupWithResponse request returning *ListResourceGroupResponse
func (c *ClientWithResponses) ListResourceGroupWithResponse(ctx context.Context, params *ListResourceGroupParams) (*ListResourceGroupResponse, error) {
	rsp, err := c.ListResourceGroup(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListResourceGroupResponse(rsp)
}

// GetSchematicsVersionWithResponse request returning *GetSchematicsVersionResponse
func (c *ClientWithResponses) GetSchematicsVersionWithResponse(ctx context.Context) (*GetSchematicsVersionResponse, error) {
	rsp, err := c.GetSchematicsVersion(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetSchematicsVersionResponse(rsp)
}

// ListWorkspacesWithResponse request returning *ListWorkspacesResponse
func (c *ClientWithResponses) ListWorkspacesWithResponse(ctx context.Context, params *ListWorkspacesParams) (*ListWorkspacesResponse, error) {
	rsp, err := c.ListWorkspaces(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspacesResponse(rsp)
}

// CreateWorkspaceWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceResponse
func (c *ClientWithResponses) CreateWorkspaceWithBodyWithResponse(ctx context.Context, params *CreateWorkspaceParams, contentType string, body io.Reader) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspaceWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkspaceWithResponse(ctx context.Context, params *CreateWorkspaceParams, body CreateWorkspaceJSONRequestBody) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspace(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

// DeleteWorkspaceWithResponse request returning *DeleteWorkspaceResponse
func (c *ClientWithResponses) DeleteWorkspaceWithResponse(ctx context.Context, wId string, params *DeleteWorkspaceParams) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspace(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

// GetWorkspaceWithResponse request returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, wId string, params *GetWorkspaceParams) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, wId string, params *UpdateWorkspaceParams, contentType string, body io.Reader) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspaceWithBody(ctx, wId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, wId string, params *UpdateWorkspaceParams, body UpdateWorkspaceJSONRequestBody) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspace(ctx, wId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

// ReplaceWorkspaceWithBodyWithResponse request with arbitrary body returning *ReplaceWorkspaceResponse
func (c *ClientWithResponses) ReplaceWorkspaceWithBodyWithResponse(ctx context.Context, wId string, params *ReplaceWorkspaceParams, contentType string, body io.Reader) (*ReplaceWorkspaceResponse, error) {
	rsp, err := c.ReplaceWorkspaceWithBody(ctx, wId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplaceWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ReplaceWorkspaceWithResponse(ctx context.Context, wId string, params *ReplaceWorkspaceParams, body ReplaceWorkspaceJSONRequestBody) (*ReplaceWorkspaceResponse, error) {
	rsp, err := c.ReplaceWorkspace(ctx, wId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseReplaceWorkspaceResponse(rsp)
}

// ListWorkspaceActivitiesWithResponse request returning *ListWorkspaceActivitiesResponse
func (c *ClientWithResponses) ListWorkspaceActivitiesWithResponse(ctx context.Context, wId string, params *ListWorkspaceActivitiesParams) (*ListWorkspaceActivitiesResponse, error) {
	rsp, err := c.ListWorkspaceActivities(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspaceActivitiesResponse(rsp)
}

// DeleteWorkspaceActivityWithResponse request returning *DeleteWorkspaceActivityResponse
func (c *ClientWithResponses) DeleteWorkspaceActivityWithResponse(ctx context.Context, wId string, activityId string, params *DeleteWorkspaceActivityParams) (*DeleteWorkspaceActivityResponse, error) {
	rsp, err := c.DeleteWorkspaceActivity(ctx, wId, activityId, params)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceActivityResponse(rsp)
}

// GetWorkspaceActivityWithResponse request returning *GetWorkspaceActivityResponse
func (c *ClientWithResponses) GetWorkspaceActivityWithResponse(ctx context.Context, wId string, activityId string, params *GetWorkspaceActivityParams) (*GetWorkspaceActivityResponse, error) {
	rsp, err := c.GetWorkspaceActivity(ctx, wId, activityId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceActivityResponse(rsp)
}

// GetWorkspaceActivityLogsWithResponse request returning *GetWorkspaceActivityLogsResponse
func (c *ClientWithResponses) GetWorkspaceActivityLogsWithResponse(ctx context.Context, wId string, activityId string, params *GetWorkspaceActivityLogsParams) (*GetWorkspaceActivityLogsResponse, error) {
	rsp, err := c.GetWorkspaceActivityLogs(ctx, wId, activityId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceActivityLogsResponse(rsp)
}

// ApplyWorkspaceCommandWithBodyWithResponse request with arbitrary body returning *ApplyWorkspaceCommandResponse
func (c *ClientWithResponses) ApplyWorkspaceCommandWithBodyWithResponse(ctx context.Context, wId string, params *ApplyWorkspaceCommandParams, contentType string, body io.Reader) (*ApplyWorkspaceCommandResponse, error) {
	rsp, err := c.ApplyWorkspaceCommandWithBody(ctx, wId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseApplyWorkspaceCommandResponse(rsp)
}

func (c *ClientWithResponses) ApplyWorkspaceCommandWithResponse(ctx context.Context, wId string, params *ApplyWorkspaceCommandParams, body ApplyWorkspaceCommandJSONRequestBody) (*ApplyWorkspaceCommandResponse, error) {
	rsp, err := c.ApplyWorkspaceCommand(ctx, wId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseApplyWorkspaceCommandResponse(rsp)
}

// DestroyWorkspaceCommandWithBodyWithResponse request with arbitrary body returning *DestroyWorkspaceCommandResponse
func (c *ClientWithResponses) DestroyWorkspaceCommandWithBodyWithResponse(ctx context.Context, wId string, params *DestroyWorkspaceCommandParams, contentType string, body io.Reader) (*DestroyWorkspaceCommandResponse, error) {
	rsp, err := c.DestroyWorkspaceCommandWithBody(ctx, wId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDestroyWorkspaceCommandResponse(rsp)
}

func (c *ClientWithResponses) DestroyWorkspaceCommandWithResponse(ctx context.Context, wId string, params *DestroyWorkspaceCommandParams, body DestroyWorkspaceCommandJSONRequestBody) (*DestroyWorkspaceCommandResponse, error) {
	rsp, err := c.DestroyWorkspaceCommand(ctx, wId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseDestroyWorkspaceCommandResponse(rsp)
}

// GetWorkspaceLogUrlsWithResponse request returning *GetWorkspaceLogUrlsResponse
func (c *ClientWithResponses) GetWorkspaceLogUrlsWithResponse(ctx context.Context, wId string, params *GetWorkspaceLogUrlsParams) (*GetWorkspaceLogUrlsResponse, error) {
	rsp, err := c.GetWorkspaceLogUrls(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceLogUrlsResponse(rsp)
}

// GetWorkspaceOutputsWithResponse request returning *GetWorkspaceOutputsResponse
func (c *ClientWithResponses) GetWorkspaceOutputsWithResponse(ctx context.Context, wId string, params *GetWorkspaceOutputsParams) (*GetWorkspaceOutputsResponse, error) {
	rsp, err := c.GetWorkspaceOutputs(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceOutputsResponse(rsp)
}

// PlanWorkspaceCommandWithResponse request returning *PlanWorkspaceCommandResponse
func (c *ClientWithResponses) PlanWorkspaceCommandWithResponse(ctx context.Context, wId string, params *PlanWorkspaceCommandParams) (*PlanWorkspaceCommandResponse, error) {
	rsp, err := c.PlanWorkspaceCommand(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParsePlanWorkspaceCommandResponse(rsp)
}

// RefreshWorkspaceCommandWithResponse request returning *RefreshWorkspaceCommandResponse
func (c *ClientWithResponses) RefreshWorkspaceCommandWithResponse(ctx context.Context, wId string, params *RefreshWorkspaceCommandParams) (*RefreshWorkspaceCommandResponse, error) {
	rsp, err := c.RefreshWorkspaceCommand(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParseRefreshWorkspaceCommandResponse(rsp)
}

// GetWorkspaceResourcesWithResponse request returning *GetWorkspaceResourcesResponse
func (c *ClientWithResponses) GetWorkspaceResourcesWithResponse(ctx context.Context, wId string, params *GetWorkspaceResourcesParams) (*GetWorkspaceResourcesResponse, error) {
	rsp, err := c.GetWorkspaceResources(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResourcesResponse(rsp)
}

// GetTemplateLogsWithResponse request returning *GetTemplateLogsResponse
func (c *ClientWithResponses) GetTemplateLogsWithResponse(ctx context.Context, wId string, tId string, params *GetTemplateLogsParams) (*GetTemplateLogsResponse, error) {
	rsp, err := c.GetTemplateLogs(ctx, wId, tId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTemplateLogsResponse(rsp)
}

// GetTemplateActivityLogWithResponse request returning *GetTemplateActivityLogResponse
func (c *ClientWithResponses) GetTemplateActivityLogWithResponse(ctx context.Context, wId string, tId string, activityId string, params *GetTemplateActivityLogParams) (*GetTemplateActivityLogResponse, error) {
	rsp, err := c.GetTemplateActivityLog(ctx, wId, tId, activityId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTemplateActivityLogResponse(rsp)
}

// GetWorkspaceTemplateStateWithResponse request returning *GetWorkspaceTemplateStateResponse
func (c *ClientWithResponses) GetWorkspaceTemplateStateWithResponse(ctx context.Context, wId string, tId string, params *GetWorkspaceTemplateStateParams) (*GetWorkspaceTemplateStateResponse, error) {
	rsp, err := c.GetWorkspaceTemplateState(ctx, wId, tId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceTemplateStateResponse(rsp)
}

// GetWorkspaceStateWithResponse request returning *GetWorkspaceStateResponse
func (c *ClientWithResponses) GetWorkspaceStateWithResponse(ctx context.Context, wId string, params *GetWorkspaceStateParams) (*GetWorkspaceStateResponse, error) {
	rsp, err := c.GetWorkspaceState(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceStateResponse(rsp)
}

// GetWorkspaceInputsWithResponse request returning *GetWorkspaceInputsResponse
func (c *ClientWithResponses) GetWorkspaceInputsWithResponse(ctx context.Context, wId string, tId string, params *GetWorkspaceInputsParams) (*GetWorkspaceInputsResponse, error) {
	rsp, err := c.GetWorkspaceInputs(ctx, wId, tId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceInputsResponse(rsp)
}

// ReplaceWorkspaceInputsWithBodyWithResponse request with arbitrary body returning *ReplaceWorkspaceInputsResponse
func (c *ClientWithResponses) ReplaceWorkspaceInputsWithBodyWithResponse(ctx context.Context, wId string, tId string, params *ReplaceWorkspaceInputsParams, contentType string, body io.Reader) (*ReplaceWorkspaceInputsResponse, error) {
	rsp, err := c.ReplaceWorkspaceInputsWithBody(ctx, wId, tId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplaceWorkspaceInputsResponse(rsp)
}

func (c *ClientWithResponses) ReplaceWorkspaceInputsWithResponse(ctx context.Context, wId string, tId string, params *ReplaceWorkspaceInputsParams, body ReplaceWorkspaceInputsJSONRequestBody) (*ReplaceWorkspaceInputsResponse, error) {
	rsp, err := c.ReplaceWorkspaceInputs(ctx, wId, tId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseReplaceWorkspaceInputsResponse(rsp)
}

// GetWorkspaceInputMetadataWithResponse request returning *GetWorkspaceInputMetadataResponse
func (c *ClientWithResponses) GetWorkspaceInputMetadataWithResponse(ctx context.Context, wId string, tId string, params *GetWorkspaceInputMetadataParams) (*GetWorkspaceInputMetadataResponse, error) {
	rsp, err := c.GetWorkspaceInputMetadata(ctx, wId, tId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceInputMetadataResponse(rsp)
}

// GetWorkspaceReadmeWithResponse request returning *GetWorkspaceReadmeResponse
func (c *ClientWithResponses) GetWorkspaceReadmeWithResponse(ctx context.Context, wId string, params *GetWorkspaceReadmeParams) (*GetWorkspaceReadmeResponse, error) {
	rsp, err := c.GetWorkspaceReadme(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceReadmeResponse(rsp)
}

// GetAllWorkspaceInputsWithResponse request returning *GetAllWorkspaceInputsResponse
func (c *ClientWithResponses) GetAllWorkspaceInputsWithResponse(ctx context.Context, wId string, params *GetAllWorkspaceInputsParams) (*GetAllWorkspaceInputsResponse, error) {
	rsp, err := c.GetAllWorkspaceInputs(ctx, wId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAllWorkspaceInputsResponse(rsp)
}

// UploadTemplateTarWithBodyWithResponse request with arbitrary body returning *UploadTemplateTarResponse
func (c *ClientWithResponses) UploadTemplateTarWithBodyWithResponse(ctx context.Context, wId string, tId string, params *UploadTemplateTarParams, contentType string, body io.Reader) (*UploadTemplateTarResponse, error) {
	rsp, err := c.UploadTemplateTarWithBody(ctx, wId, tId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUploadTemplateTarResponse(rsp)
}

// ParseListSchematicsLocationResponse parses an HTTP response from a ListSchematicsLocationWithResponse call
func ParseListSchematicsLocationResponse(rsp *http.Response) (*ListSchematicsLocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListSchematicsLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SchematicsLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseListResourceGroupResponse parses an HTTP response from a ListResourceGroupWithResponse call
func ParseListResourceGroupResponse(rsp *http.Response) (*ListResourceGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListResourceGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetSchematicsVersionResponse parses an HTTP response from a GetSchematicsVersionWithResponse call
func ParseGetSchematicsVersionResponse(rsp *http.Response) (*GetSchematicsVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSchematicsVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListWorkspacesResponse parses an HTTP response from a ListWorkspacesWithResponse call
func ParseListWorkspacesResponse(rsp *http.Response) (*ListWorkspacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateWorkspaceResponse parses an HTTP response from a CreateWorkspaceWithResponse call
func ParseCreateWorkspaceResponse(rsp *http.Response) (*CreateWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkspaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceResponse parses an HTTP response from a DeleteWorkspaceWithResponse call
func ParseDeleteWorkspaceResponse(rsp *http.Response) (*DeleteWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseReplaceWorkspaceResponse parses an HTTP response from a ReplaceWorkspaceWithResponse call
func ParseReplaceWorkspaceResponse(rsp *http.Response) (*ReplaceWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplaceWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListWorkspaceActivitiesResponse parses an HTTP response from a ListWorkspaceActivitiesWithResponse call
func ParseListWorkspaceActivitiesResponse(rsp *http.Response) (*ListWorkspaceActivitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspaceActivitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceActivities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest WorkspaceActivities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceActivityResponse parses an HTTP response from a DeleteWorkspaceActivityWithResponse call
func ParseDeleteWorkspaceActivityResponse(rsp *http.Response) (*DeleteWorkspaceActivityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceActivityApplyResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceActivityResponse parses an HTTP response from a GetWorkspaceActivityWithResponse call
func ParseGetWorkspaceActivityResponse(rsp *http.Response) (*GetWorkspaceActivityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceActivity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceActivityLogsResponse parses an HTTP response from a GetWorkspaceActivityLogsWithResponse call
func ParseGetWorkspaceActivityLogsResponse(rsp *http.Response) (*GetWorkspaceActivityLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceActivityLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceActivityLogs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseApplyWorkspaceCommandResponse parses an HTTP response from a ApplyWorkspaceCommandWithResponse call
func ParseApplyWorkspaceCommandResponse(rsp *http.Response) (*ApplyWorkspaceCommandResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ApplyWorkspaceCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest WorkspaceActivityApplyResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDestroyWorkspaceCommandResponse parses an HTTP response from a DestroyWorkspaceCommandWithResponse call
func ParseDestroyWorkspaceCommandResponse(rsp *http.Response) (*DestroyWorkspaceCommandResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DestroyWorkspaceCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest WorkspaceActivityDestroyResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceLogUrlsResponse parses an HTTP response from a GetWorkspaceLogUrlsWithResponse call
func ParseGetWorkspaceLogUrlsResponse(rsp *http.Response) (*GetWorkspaceLogUrlsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceLogUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogStoreResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceOutputsResponse parses an HTTP response from a GetWorkspaceOutputsWithResponse call
func ParseGetWorkspaceOutputsResponse(rsp *http.Response) (*GetWorkspaceOutputsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceOutputsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OutputValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePlanWorkspaceCommandResponse parses an HTTP response from a PlanWorkspaceCommandWithResponse call
func ParsePlanWorkspaceCommandResponse(rsp *http.Response) (*PlanWorkspaceCommandResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PlanWorkspaceCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest WorkspaceActivityPlanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRefreshWorkspaceCommandResponse parses an HTTP response from a RefreshWorkspaceCommandWithResponse call
func ParseRefreshWorkspaceCommandResponse(rsp *http.Response) (*RefreshWorkspaceCommandResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RefreshWorkspaceCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest WorkspaceActivityRefreshResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResourcesResponse parses an HTTP response from a GetWorkspaceResourcesWithResponse call
func ParseGetWorkspaceResourcesResponse(rsp *http.Response) (*GetWorkspaceResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TemplateResourcesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTemplateLogsResponse parses an HTTP response from a GetTemplateLogsWithResponse call
func ParseGetTemplateLogsResponse(rsp *http.Response) (*GetTemplateLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTemplateLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TemplateLogStoreString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTemplateActivityLogResponse parses an HTTP response from a GetTemplateActivityLogWithResponse call
func ParseGetTemplateActivityLogResponse(rsp *http.Response) (*GetTemplateActivityLogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTemplateActivityLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceActivityTemplateLogString
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceTemplateStateResponse parses an HTTP response from a GetWorkspaceTemplateStateWithResponse call
func ParseGetWorkspaceTemplateStateResponse(rsp *http.Response) (*GetWorkspaceTemplateStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceTemplateStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TemplateStateStore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceStateResponse parses an HTTP response from a GetWorkspaceStateWithResponse call
func ParseGetWorkspaceStateResponse(rsp *http.Response) (*GetWorkspaceStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StateStoreResponseList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceInputsResponse parses an HTTP response from a GetWorkspaceInputsWithResponse call
func ParseGetWorkspaceInputsResponse(rsp *http.Response) (*GetWorkspaceInputsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceInputsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TemplateValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReplaceWorkspaceInputsResponse parses an HTTP response from a ReplaceWorkspaceInputsWithResponse call
func ParseReplaceWorkspaceInputsResponse(rsp *http.Response) (*ReplaceWorkspaceInputsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplaceWorkspaceInputsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceInputMetadataResponse parses an HTTP response from a GetWorkspaceInputMetadataWithResponse call
func ParseGetWorkspaceInputMetadataResponse(rsp *http.Response) (*GetWorkspaceInputMetadataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceInputMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TemplateMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceReadmeResponse parses an HTTP response from a GetWorkspaceReadmeWithResponse call
func ParseGetWorkspaceReadmeResponse(rsp *http.Response) (*GetWorkspaceReadmeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceReadmeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TemplateReadme
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllWorkspaceInputsResponse parses an HTTP response from a GetAllWorkspaceInputsWithResponse call
func ParseGetAllWorkspaceInputsResponse(rsp *http.Response) (*GetAllWorkspaceInputsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAllWorkspaceInputsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceTemplateValuesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUploadTemplateTarResponse parses an HTTP response from a UploadTemplateTarWithResponse call
func ParseUploadTemplateTarResponse(rsp *http.Response) (*UploadTemplateTarResponse, error) {
	fmt.Printf("[DEBUG] response: %+v\n", rsp)
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	fmt.Printf("[DEBUG] body: %s\n", bodyBytes)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UploadTemplateTarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TemplateRepoTarUploadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIMessagePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
